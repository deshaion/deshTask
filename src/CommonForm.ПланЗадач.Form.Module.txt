&НаКлиенте
Перем фПроверкаТекущаяСтрока;

&НаКлиенте
Перем мВведенныйТекст;

&НаКлиенте
Перем ПодобранныеЗначения;

&НаКлиенте
Перем фЗаблокироватьВызовСервера;

////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ОбновитьСписокЗадач(пСотрудник)
	ТаблицаЗадач.Очистить();
	
	// получаю 10 задач вперед
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 10
	|	ПланДел.Дело,
	|	ПланДел.Дата КАК День
	|ИЗ
	|	РегистрСведений.ПланДел КАК ПланДел
	|ГДЕ
	|	ПланДел.Дата >= &ТекущаяДата
	|	И Сотрудник = &текСотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Старт";
	
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("текСотрудник", пСотрудник);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	текДень = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если НЕ текДень = Выборка.День Тогда
			новСтрока = ТаблицаЗадач.Добавить();
			новСтрока.Системная = Истина;
			новСтрока.Задача = ИмяДняНедели(ДеньНедели(Выборка.День)) + " [" + Формат(Выборка.День, "ДЛФ=DD") + "]";
			
			текДень = Выборка.День;
		КонецЕсли;
		
		новСтрока = ТаблицаЗадач.Добавить();
		новСтрока.Задача = Выборка.Дело;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 20
	|	ПланДел.СистемныйПриоритет,
	|	ПланДел.Статус,
	|	ПланДел.Дело
	|ПОМЕСТИТЬ СписокДелКВыполнению
	|ИЗ
	|	РегистрСведений.ЗадачиКВыполнению КАК ПланДел
	|ГДЕ
	|	Исполнитель = &текСотрудник
	|	И (		Статус = Значение(Перечисление.Статус.КВыполнению)
	|		ИЛИ Статус = Значение(Перечисление.Статус.ВРаботе)
	|	  )
	|УПОРЯДОЧИТЬ ПО
	|	ПланДел.СистемныйПриоритет
	|;
	|///////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланДел.СистемныйПриоритет,
	|	ПланДел.Статус,
	|	ПланДел.Дело
	|ПОМЕСТИТЬ СписокДелДоп
	|ИЗ
	|	РегистрСведений.ЗадачиКВыполнению КАК ПланДел
	|ГДЕ
	|	Исполнитель = &текСотрудник
	|	И (		Статус = Значение(Перечисление.Статус.ДопИнформация)
	|		ИЛИ Статус = Значение(Перечисление.Статус.Уточняется)
	|	  )
	|;
	|///////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланДел.СистемныйПриоритет,
	|	ПланДел.Статус,
	|	ПланДел.Дело
	|ПОМЕСТИТЬ СписокДел
	|ИЗ
	|	СписокДелКВыполнению КАК ПланДел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланДел.СистемныйПриоритет,
	|	ПланДел.Статус,
	|	ПланДел.Дело
	|ИЗ
	|	СписокДелДоп КАК ПланДел
	|;
	|///////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланДел.Статус КАК Статус,
	|	ПланДел.Дело.ГруппаДел КАК Проект,
	|	ПланДел.Дело КАК Задача,
	|	СУММА(РАЗНОСТЬДАТ(Потрачено.Старт, Потрачено.Завершение, МИНУТА) / 60) КАК Потрачено,
	|	ДатыЗадач.ПланТрудозатрат КАК Оценка,
	|	ДатыЗадач.ПлановаяДата КАК Срок
	|ИЗ
	|	СписокДел КАК ПланДел
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ДатыЗадач.СрезПоследних КАК ДатыЗадач
	|ПО
	|	ПланДел.Дело = ДатыЗадач.Дело
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.Дела КАК Потрачено
	|ПО
	|	ПланДел.Дело = Потрачено.Дело
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланДел.Статус,
	|	ПланДел.Дело.ГруппаДел,
	|	ПланДел.Дело,
	|	ДатыЗадач.ПланТрудозатрат,
	|	ДатыЗадач.ПлановаяДата,
	|	ПланДел.СистемныйПриоритет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланДел.СистемныйПриоритет
	|";
	
	Запрос.УстановитьПараметр("текСотрудник", пСотрудник);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	новСтрокаВРаб = ТаблицаЗадач.Добавить();
	новСтрокаВРаб.Системная = Истина;
	новСтрокаВРаб.Задача = "Задачи ""В работе""";
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Статус = Перечисления.Статус.ВРаботе Тогда
			новСтрока = ТаблицаЗадач.Добавить();
			ЗаполнитьЗначенияСвойств(новСтрока, Выборка);
		КонецЕсли;
	КонецЦикла;
	
	новСтрокаКВып = ТаблицаЗадач.Добавить();
	новСтрокаКВып.Системная = Истина;
	новСтрокаКВып.Задача = "Задачи ""К выполнению""";
	
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Статус = Перечисления.Статус.КВыполнению Тогда
			новСтрока = ТаблицаЗадач.Добавить();
			ЗаполнитьЗначенияСвойств(новСтрока, Выборка);
		КонецЕсли;
	КонецЦикла;
	
	новСтрокаВРаб = ТаблицаЗадач.Добавить();
	новСтрокаВРаб.Системная = Истина;
	новСтрокаВРаб.Задача = "Задачи ""Доп. информация""";
	
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Статус = Перечисления.Статус.ДопИнформация Тогда
			новСтрока = ТаблицаЗадач.Добавить();
			ЗаполнитьЗначенияСвойств(новСтрока, Выборка);
		КонецЕсли;
	КонецЦикла;
	
	новСтрокаВРаб = ТаблицаЗадач.Добавить();
	новСтрокаВРаб.Системная = Истина;
	новСтрокаВРаб.Задача = "Задачи ""Уточняется""";
	
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Статус = Перечисления.Статус.Уточняется Тогда
			новСтрока = ТаблицаЗадач.Добавить();
			ЗаполнитьЗначенияСвойств(новСтрока, Выборка);
		КонецЕсли;
	КонецЦикла;
	
	// Посчитаем сколько осталось сделать по каждой задаче
	Для каждого лСтрока Из ТаблицаЗадач Цикл
		Если лСтрока.системная Тогда
			Продолжить;
		КонецЕсли;
		
		лСтрока.Осталось = лСтрока.Оценка - лСтрока.Потрачено;
	КонецЦикла;
КонецПроцедуры // ОбновитьСписокЗадач()

&НаКлиенте
Процедура клОбновитьСписокЗадач()
	Если фЗаблокироватьВызовСервера Тогда
		Возврат;
	КонецЕсли;
	
	текДанные = Элементы.ТаблицаЗадач.ТекущиеДанные;
	Если НЕ текДанные = Неопределено Тогда
		текЗадача = текДанные.Задача;
	КонецЕсли;
	
	ОбновитьСписокЗадач(текСотрудник);
	
	найдСтроки = ТаблицаЗадач.НайтиСтроки(Новый Структура("Задача", текЗадача));
	Если найдСтроки.Количество() > 0 Тогда
		Элементы.ТаблицаЗадач.ТекущаяСтрока = найдСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры // клОбновитьСписокЗадач()

&НаКлиенте
Процедура Обновить(Команда)
	клОбновитьСписокЗадач();
КонецПроцедуры

////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	текСотрудник = ПараметрыСеанса.ТекущийСотрудник;
	
	//itl.ermakov [25.05.2012] {{
	ЗаполнитьДополнительныеПараметры();
	//}}itl.ermakov [25.05.2012]
	
	ОбновитьСписокЗадач(текСотрудник);
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДополнительныеПараметры() 
	
	//itl.ermakov [24.05.2012] {{
	ПараметрыПользователя = Пользователи.ПолучитьНастройкиПользователя();
	Если ПараметрыПользователя.Свойство("ПланЗадач_СтраницаЧекЛистПоУмолчанию") Тогда
		фСтраницаЧелЛистаПоУмолчанию = ПараметрыПользователя.ПланЗадач_СтраницаЧекЛистПоУмолчанию; 
	КонецЕсли;
	//}}itl.ermakov [24.05.2012]
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("клОбновитьСписокЗадач", 60);
	
	фЗаблокироватьВызовСервера = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Дело_ИзмененСтатус" Тогда
		клОбновитьСписокЗадач();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ИмяДняНедели(номерДняНедели)
	Если номерДняНедели = 1 Тогда
		Возврат "ПОНЕДЕЛЬНИК";
	ИначеЕсли номерДняНедели = 2 Тогда
		Возврат "ВТОРНИК";
	ИначеЕсли номерДняНедели = 3 Тогда
		Возврат "СРЕДА";
	ИначеЕсли номерДняНедели = 4 Тогда
		Возврат "ЧЕТВЕРГ";
	ИначеЕсли номерДняНедели = 5 Тогда
		Возврат "ПЯТНИЦА";
	ИначеЕсли номерДняНедели = 6 Тогда
		Возврат "СУББОТА";
	ИначеЕсли номерДняНедели = 7 Тогда
		Возврат "ВОСКРЕСЕНЬЕ";
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ТаблицаЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если    Поле = Элементы.ТаблицаЗадачОценка
		ИЛИ Поле = Элементы.ТаблицаЗадачОсталось Тогда
		Возврат;
	КонецЕсли;
	
	выбСтрока = ТаблицаЗадач.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если выбСтрока.Системная Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Дело.ФормаОбъекта", Новый Структура("Ключ", выбСтрока.Задача));
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗадачНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	текДанные = Элементы.ТаблицаЗадач.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	                                               
	Если текДанные.Системная Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.Значение = Новый Структура;
	ПараметрыПеретаскивания.Значение.Вставить("Дело", текДанные.Задача);
КонецПроцедуры

&НаСервере
Функция ДоступнаФункцияИзмененияПорядкаСвоихЗадач()
	Если РольДоступна("ИзменениеПорядкаСвоихЗадач") Тогда
		Возврат Истина;
	КонецЕсли;
	Если ПараметрыСеанса.РольСотрудника = Перечисления.РолиСотрудников.ПолныеПрава Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции // ДоступнаФункцияИзмененияПорядкаСвоихЗадач()

&НаКлиенте
Процедура ТаблицаЗадачПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ДоступнаФункцияИзмененияПорядкаСвоихЗадач() Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
	Если НЕ (ТипЗнч(ПараметрыПеретаскивания.Значение) = тип("структура")
		 И ПараметрыПеретаскивания.Значение.Свойство("Дело"))
		Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
	Если ТаблицаЗадач.НайтиПоИдентификатору(Строка).Системная Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗадачПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ПоменятьПорядокЗадач(ПараметрыПеретаскивания.Значение.Дело, ТаблицаЗадач.НайтиПоИдентификатору(Строка).Задача, , Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗадачПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущаяСтрока = фПроверкаТекущаяСтрока Тогда
 		Возврат;
	КонецЕсли;

	фПроверкаТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	текДанные = Элементы.ТаблицаЗадач.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	клОбновитьОписание();
	
	Если НЕ текДанные.Системная Тогда
		ПриАктивизацииЗадачиСервер(текДанные.Задача);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриАктивизацииЗадачиСервер(текЗадача)
	ФорматированныйТекст = текЗадача.РасширенноеОписание.Получить();
	ОбновитьЧекЛист(текЗадача);
	ОбновитьДопИнфо(текЗадача);
КонецПроцедуры // ПриАктивизацииЗадачиСервер()

////////////////////////////////////////////////////
// контекстное меню плана задач

&НаКлиенте
Процедура ИзменитьСтатус(пИмяСтатуса)
	текДанные = Элементы.ТаблицаЗадач.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Статусы.ИзменитьСтатус(текДанные.Задача, пИмяСтатуса);
	
	клОбновитьСписокЗадач();
КонецПроцедуры // ИзменитьСтатус()

&НаКлиенте
Процедура ЗадачаРешена(Команда)
	ИзменитьСтатус("Решен");
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаУточняется(Команда)
	ИзменитьСтатус("Уточняется");
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВРаботе(Команда)
	ИзменитьСтатус("ВРаботе");
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаКВыполнению(Команда)
	ИзменитьСтатус("КВыполнению");
КонецПроцедуры

////////////////////////////////////////////////////
// изменение оценки и сроков

&НаКлиенте
Процедура ТаблицаЗадачОценкаПриИзменении(Элемент)
	текДанные = Элементы.ТаблицаЗадач.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачиКВыполнению.ИзмененаОценка(текДанные.Задача, текДанные.Статус, текДанные.Срок, текДанные.Потрачено, , текДанные.Оценка, текСотрудник);
	
	клОбновитьСписокЗадач();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗадачОсталосьПриИзменении(Элемент)
	текДанные = Элементы.ТаблицаЗадач.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачиКВыполнению.ИзмененаОценка(текДанные.Задача, текДанные.Статус, текДанные.Срок, текДанные.Потрачено, текДанные.Осталось, , текСотрудник);
	
	клОбновитьСписокЗадач();
КонецПроцедуры

/////////////////////////////////////////////////////////
// КОММЕНТАРИИ

&НаКлиенте
Процедура клОбновитьОписание()
	текДанные = Элементы.ТаблицаЗадач.ТекущиеДанные;
	Если текДанные = Неопределено ИЛИ фЗаблокироватьВызовСервера Тогда
		Возврат;
	КонецЕсли;
	
	ПолеИстории = КомментарииСервер.ПолучитьОписание(текДанные.Задача);
КонецПроцедуры // клОбновитьОписание()

&НаКлиенте
Процедура СменитьСтатусПоручения(текДело = Неопределено)
	Если текДело = Неопределено Тогда
		текДело = Элементы.ТаблицаЗадач.ТекущиеДанные;
	КонецЕсли;
	
	Если текДело = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомментарийДела = СтрЗаменить(ПолеКомментария, Символы.ПС, "<br>");
	ПолеКомментария = "";
	
	КомментарииКлиент.УстановитьСтатусПоручения(текДело.Задача, КомментарийДела);
	
	клОбновитьОписание();
КонецПроцедуры // СменитьСтатусПоручения()

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	СменитьСтатусПоручения();
КонецПроцедуры

&НаКлиенте
Процедура СсылкаДобавитьКомментарийНажатие(Элемент)
	текПозиция = Элементы.ПанельДобавленияКомментария.Видимость;
	
	Элементы.ПанельДобавленияКомментария.Видимость = НЕ текПозиция;
	Если текПозиция Тогда // панель видима, и мы переходим в режим не видимости
		Элементы.СсылкаДобавитьКомментарий.Заголовок = "Оставить комментарий";
	Иначе
		Элементы.СсылкаДобавитьКомментарий.Заголовок = "Скрыть поле добавления комментария";
	КонецЕсли;
КонецПроцедуры

/////////////////////////////////////////////////////////
// ФУНКЦИИ ЧЕК-ЛИСТА

&НаСервере
Функция ОбновитьЧекЛист(ЗНАЧ пСсылка, НеПроверятьНаличиеПунктов = Истина)
	
	ЧекЛистыСервер.ДобавитьЧекЛист(ЭтаФорма, пСсылка, "СтраницаЧекЛиста", , НеПроверятьНаличиеПунктов);
	
	//itl.ermakov [24.05.2012] {{
	Элементы.СтраницаЧекЛиста.Заголовок = ЧекЛистыСервер.ПолучитьТекстЗаголовка(пСсылка);
	//}}itl.ermakov [24.05.2012]
	
	//itl.ermakov [25.05.2012] {{
	Если фСтраницаЧелЛистаПоУмолчанию Тогда
		Элементы.СтраницыДопИнфо.ТекущаяСтраница = Элементы.СтраницаЧекЛиста;
	КонецЕсли;
	//}}itl.ermakov [25.05.2012]
	
КонецФункции // ОбновитьЧекЛист()

&НаКлиенте
Процедура ЧекЛистНажатие(Элемент)
	текДанные = Элементы.ТаблицаЗадач.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ОбновитьЧекЛист(текДанные.Задача);
КонецПроцедуры // ЧекЛистНажатие()

&НаКлиенте
Процедура НовыйПунктПриИзменении(Элемент)
	текДанные = Элементы.ТаблицаЗадач.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧекЛистыСервер.ЗаписатьНовыйПункт(ЭтаФорма.ПунктЧекЛиста, текДанные.Задача, Элементы.СтраницаЧекЛиста.Заголовок);

	Элементы.ЭлементыЧекЛиста.Обновить();
	
	фЗаблокироватьВызовСервера = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ЧекЛистыСервер.УстановитьСнятьВыполнено(ВыбраннаяСтрока, Элементы.СтраницаЧекЛиста.Заголовок);
		
	Элемент.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура НовыйПунктАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	фЗаблокироватьВызовСервера = Истина;
КонецПроцедуры

/////////////////////////////////////////////////////////
&НаКлиенте
Процедура ОткрытьВМантис(Команда)
	текДанные = Элементы.ТаблицаЗадач.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	кодЗадачи = ПолучитьКодМантиса(текДанные.Задача);
	Если кодЗадачи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьПриложение("http://itland-group.ru/mantis/view.php?id=" + Формат(кодЗадачи, "ЧГ=0"));
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСМантис(Команда)
	текДанные = Элементы.ТаблицаЗадач.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Дело.Форма.ФормаДобавленияСвязиСМантисом", Новый Структура("Дело", текДанные.Задача));	

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКодМантиса(пДело)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МантисЗадачи.КодМантиса
	|ИЗ
	|	РегистрСведений.МантисЗадачи КАК МантисЗадачи
	|ГДЕ
	|	МантисЗадачи.Дело = &Дело";
	
	Запрос.УстановитьПараметр("Дело", пДело);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КодМантиса;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // ПолучитьКодМантиса()

&НаКлиенте
Процедура ДвинутьВверх(Команда)
	текДанные = Элементы.ТаблицаЗадач.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	текИндекс = ТаблицаЗадач.Индекс(текДанные);
	ЗадачаНазначение = Неопределено;
	
	Пока Истина Цикл
		Если текИндекс = 0 Тогда
			Прервать;
		КонецЕсли;
		
		текИндекс = текИндекс - 1;
		Если НЕ ТаблицаЗадач.Получить(текИндекс).Системная Тогда
			ЗадачаНазначение = ТаблицаЗадач.Получить(текИндекс).Задача;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПоменятьПорядокЗадач(текДанные.Задача, ЗадачаНазначение, -1);
КонецПроцедуры

&НаКлиенте
Процедура ДвинутьВниз(Команда)
	текДанные = Элементы.ТаблицаЗадач.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	текИндекс = ТаблицаЗадач.Индекс(текДанные);
	ЗадачаНазначение = Неопределено;
	
	Пока Истина Цикл
		Если текИндекс = ТаблицаЗадач.Количество() - 1 Тогда
			Прервать;
		КонецЕсли;
		
		текИндекс = текИндекс + 1;
		Если НЕ ТаблицаЗадач.Получить(текИндекс).Системная Тогда
			ЗадачаНазначение = ТаблицаЗадач.Получить(текИндекс).Задача;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПоменятьПорядокЗадач(текДанные.Задача, ЗадачаНазначение, 1);
КонецПроцедуры

&НаСервере
Процедура ПоменятьПорядокЗадач(ЗадачаИсточник, ЗадачаНазначение, Движение = 1, Перетаскивание = Ложь)
	Если ЗадачаНазначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	массивЗадач = Новый Массив;
	массивЗадач.Добавить(ЗадачаИсточник);
	массивЗадач.Добавить(ЗадачаНазначение);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачиКВыполнению.Дело,
	|	ЗадачиКВыполнению.СистемныйПриоритет
	|ИЗ
	|	РегистрСведений.ЗадачиКВыполнению КАК ЗадачиКВыполнению
	|ГДЕ
	|	ЗадачиКВыполнению.Дело В(&Дело)";
	
	Запрос.УстановитьПараметр("Дело", массивЗадач);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НомерА = 0;
	НомерБ = 0;
	ЗадачаА = ЗадачаИсточник;
	ЗадачаБ = ЗадачаНазначение;
	
	Пока Выборка.Следующий() Цикл
		Если ЗадачаА = Выборка.Дело Тогда
			НомерА = Выборка.СистемныйПриоритет;
		КонецЕсли;
		Если ЗадачаБ = Выборка.Дело Тогда
			НомерБ = Выборка.СистемныйПриоритет;
		КонецЕсли;
	КонецЦикла;
	
	Если НомерА >= 77777777 ИЛИ НомерБ >= 77777777 Тогда
		Возврат;
	КонецЕсли;
	
	Если НомерА = 0 И НомерБ = 0 Тогда
		// системных приоритетов еще нет ни у одной задачи. Тогда присваиваю приоритет 1 и 2
		Если Движение = 1 Тогда
			ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(ЗадачаА, 2, "СистемныйПриоритет");
			Статусы.ПереписатьСледующиеПриоритеты(ЗадачаА, 1, 0, 2); // TODO: hack
			ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(ЗадачаБ, 1, "СистемныйПриоритет");
		ИначеЕсли Движение = -1 Тогда
			ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(ЗадачаА, 1, "СистемныйПриоритет");
			Статусы.ПереписатьСледующиеПриоритеты(ЗадачаА, 1, 0, 2); // TODO: hack
			ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(ЗадачаБ, 2, "СистемныйПриоритет");
		КонецЕсли;
	ИначеЕсли НЕ НомерА = 0 И НЕ НомерБ = 0 Тогда
		Если Перетаскивание Тогда
			ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(ЗадачаА, НомерБ, "СистемныйПриоритет");
			Статусы.ПереписатьСледующиеПриоритеты(ЗадачаА, 0, НомерА);
			Статусы.ПереписатьСледующиеПриоритеты(ЗадачаА, НомерБ, 0);
		Иначе
			ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(ЗадачаА, НомерБ, "СистемныйПриоритет");
			ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(ЗадачаБ, НомерА, "СистемныйПриоритет");
		КонецЕсли;
	Иначе // НомерА = Неопределено ИЛИ НомерБ = Неопределено
		Если НомерА = 0 Тогда
			ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(ЗадачаА, 1, "СистемныйПриоритет");
			Статусы.ПереписатьСледующиеПриоритеты(ЗадачаА, 1, 0, 1); // TODO: hack
			номерА = 1; НомерБ = НомерБ + 1;
		КонецЕсли;
		Если НомерБ = 0 Тогда
			ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(ЗадачаБ, 1, "СистемныйПриоритет");
			Статусы.ПереписатьСледующиеПриоритеты(ЗадачаБ, 1, 0); // TODO: hack
			НомерБ = 1; НомерА = НомерА + 1;
		КонецЕсли;
		
		Если Перетаскивание Тогда
			Статусы.ПереписатьСледующиеПриоритеты(ЗадачаА, 0, НомерА);
			Статусы.ПереписатьСледующиеПриоритеты(ЗадачаА, НомерБ, 0);
			ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(ЗадачаА, НомерБ, "СистемныйПриоритет");
		Иначе
			ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(ЗадачаА, НомерБ, "СистемныйПриоритет");
			ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(ЗадачаБ, НомерА, "СистемныйПриоритет");
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСписокЗадач(текСотрудник);
КонецПроцедуры // ПоменятьПорядокЗадач()

/////////////////////////////////////////////////////////
// Авто подбор в задачу И добавление задачи в список

&НаСервере
Функция СохранитьНовуюСтрокуВРегистры(текДело, пТекСотрудник)
	// ЗадачиКВыполнению
	наборЗаписей = РегистрыСведений.ЗадачиКВыполнению.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Дело.Установить(текДело);
	наборЗаписей.Прочитать();

	Если наборЗаписей.Количество() = 0 Тогда
		новаяЗапись = наборЗаписей.Добавить();
		новаяЗапись.ДатаДобавления = ТекущаяДата();
		новаяЗапись.Приоритет = Перечисления.Приоритеты.НеУстановлен;
		новаяЗапись.Дело = текДело;
	Иначе
		новаяЗапись = наборЗаписей[0];
	КонецЕсли;

	новаяЗапись.Исполнитель = пТекСотрудник;
	новаяЗапись.Статус = Перечисления.Статус.КВыполнению;
	
	наборЗаписей.Записать();
КонецФункции // СохранитьНовуюСтрокуВРегистры()

&НаКлиенте
Процедура ЗадачаДобавленияПриИзменении(Элемент)
	// выбранное значение добавляем в список задач
	// если в списке задач уже есть, то обновляем исполнителя и меняем статус на к выполнению
	
	Если ЗадачаДобавления.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьПроектДобавления();
	
	Если ПроектДобавления.Пустая() Тогда
		формаВыбора = ПолучитьФорму("Справочник.ГруппаДел.ФормаВыбора", , ЭтаФорма);
		ПроектДобавления = формаВыбора.ОткрытьМодально()
	КонецЕсли;
	
	СохранитьНовуюСтрокуВРегистры(ЗадачаДобавления, текСотрудник);
	
	ПроектДобавленияПриИзменении();
	
	клОбновитьСписокЗадач();
	
	фЗаблокироватьВызовСервера = Ложь;
	ЗадачаДобавления = Неопределено;
	
	ТекущийЭлемент = Элементы.ЗадачаДобавления;
КонецПроцедуры

&НаСервере
Функция ПолучитьПроектДобавления()
	ПроектДобавления = ЗадачаДобавления.ГруппаДел;
КонецФункции // ПолучитьПроектДобавления()
	
&НаКлиенте
Процедура ПроектДобавленияПриИзменении()
	Если ЗначениеЗаполнено(ЗадачаДобавления) Тогда
		МодульДел.ОбновитьГруппуДел(ЗадачаДобавления, ПроектДобавления);
		
		ЗадачаДобавления = ПредопределенноеЗначение("Справочник.Дело.ПустаяСсылка");
        ПроектДобавления = ПредопределенноеЗначение("Справочник.ГруппаДел.ПустаяСсылка");
	КонецЕсли;
	
	фЗаблокироватьВызовСервера = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаДобавленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	МодульДел.ОбработкаВыбора(ВыбранноеЗначение, СтандартнаяОбработка, мВведенныйТекст);
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаДобавленияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	фЗаблокироватьВызовСервера = Истина;
	
	МодульДел.Подбор(Текст, ДанныеВыбора, СтандартнаяОбработка, мВведенныйТекст, ПодобранныеЗначения, , );
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаДобавленияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	подобранноеЗначение = ПодобранныеЗначения[Текст];
	Если НЕ подобранноеЗначение = Неопределено Тогда
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(подобранноеЗначение);
	Иначе
		МодульДел.Подбор(Текст, ДанныеВыбора, СтандартнаяОбработка, мВведенныйТекст, ПодобранныеЗначения);
	КонецЕсли;
КонецПроцедуры

/////////////////////////////////////////////////////////

&НаКлиенте
Процедура СкрытьДобавлениеНажатие(Элемент)
	Элементы.ГруппаДобавления.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗадачПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьЗадачу(Неопределено);
КонецПроцедуры

&НаСервере
Процедура ПоказатьГруппуДобавленияСервер()
	Элементы.ГруппаДобавления.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолеКомментарияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	фЗаблокироватьВызовСервера = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолеКомментарияПриИзменении(Элемент)
	фЗаблокироватьВызовСервера = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПроектДобавленияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	фЗаблокироватьВызовСервера = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Пересчитать(Команда)
	текДанные = Неопределено;
	Для каждого текДанные Из ТаблицаЗадач Цикл
		Если НЕ текДанные.Системная Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ текДанные = Неопределено Тогда
		ЗадачиКВыполнению.ИзмененаОценка(текДанные.Задача, текДанные.Статус, текДанные.Срок, текДанные.Потрачено, , текДанные.Оценка, текСотрудник);
	КонецЕсли;
	
	клОбновитьСписокЗадач();
КонецПроцедуры

Функция ОбновитьДопИнфо(ЗНАЧ пСсылка)
	элементОтбора = Неопределено;
	
	Для каждого текЭлемент Из ОтданныеГолоса.Отбор.Элементы Цикл
		Если текЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дело") Тогда
			элементОтбора = текЭлемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если элементОтбора = Неопределено Тогда
		элементОтбора = ОтданныеГолоса.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	
	элементОтбора.использование = Истина;
	элементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дело");
	элементОтбора.ПравоеЗначение = пСсылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЖесткиеДатыЗадач.Дело,
	|	МАКСИМУМ(ЖесткиеДатыЗадач.Трудозатраты) КАК Трудозатраты,
	|	МАКСИМУМ(ЖесткиеДатыЗадач.КрайнийСрок) КАК КрайнийСрок
	|ПОМЕСТИТЬ ЖесткиеДатыЗадач
	|ИЗ
	|	РегистрСведений.ЖесткиеДатыЗадач КАК ЖесткиеДатыЗадач
	|СГРУППИРОВАТЬ ПО
	|	ЖесткиеДатыЗадач.Дело
	|;
	|ВЫБРАТЬ
	|	Приоритет КАК Приоритет,
	|	Контроллер КАК АвторЗадачи,
	|	ДатаДобавления КАК ДатаДобавления,
	|	ТвердыеДатыЗадач.Трудозатраты КАК ОбещаннаяОценка,
	|	ТвердыеДатыЗадач.КрайнийСрок КАК ОбещанныйСрок
	|ИЗ
	|	РегистрСведений.ЗадачиКВыполнению КАК ЗадачиКВыполнению
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ЖесткиеДатыЗадач КАК ТвердыеДатыЗадач
	|ПО
	|	ЗадачиКВыполнению.Дело = ТвердыеДатыЗадач.Дело
	|ГДЕ
	|	ЗадачиКВыполнению.Дело = &Дело
	|";
	
	Запрос.УстановитьПараметр("Дело", пСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		АвторЗадачи		= Выборка.АвторЗадачи;
		ДатаДобавления	= Выборка.ДатаДобавления;
		Приоритет		= Выборка.Приоритет;
		ОбещаннаяОценка	= Выборка.ОбещаннаяОценка;
		ОбещанныйСрок	= Выборка.ОбещанныйСрок;
	КонецЦикла;
КонецФункции // ОбновитьДопИнфо()

&НаКлиенте
Процедура текСотрудникПриИзменении(Элемент)
	клОбновитьСписокЗадач();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗадачу(Команда)
	ПоказатьГруппуДобавленияСервер();
	
	// по неизвестным причинам не работает
	ТекущийЭлемент = Элементы.ЗадачаДобавления;
	
	//Попытка
	//	Скрипт = Новый COMОбъект("WScript.Shell");
	//   	Скрипт.SendKeys("+{TAB}");
	//	Скрипт.SendKeys("+{TAB}");
	//Исключение
	//КонецПопытки;
КонецПроцедуры




