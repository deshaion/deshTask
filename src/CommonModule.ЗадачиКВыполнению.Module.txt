
Функция СохранитьВЗадачиКВыполнению(пДело, пПараметр, пИмяПараметра, предЗначение = Неопределено, СоздаватьНовую = Истина) Экспорт 
	Если НЕ ЗначениеЗаполнено(пДело) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат МодульДел.ОбновитьЗначениеВРегистре("ЗадачиКВыполнению", "Дело", пДело, пИмяПараметра, пПараметр, предЗначение, СоздаватьНовую);
	
	//наборЗаписей = РегистрыСведений.ЗадачиКВыполнению.СоздатьНаборЗаписей();
	//наборЗаписей.Отбор.Дело.Установить(пДело);
	//наборЗаписей.Прочитать();
	//
	//Если наборЗаписей.Количество() = 0 И СоздаватьНовую Тогда
	//	новаяЗапись = наборЗаписей.Добавить();
	//ИначеЕсли наборЗаписей.Количество() > 0 Тогда
	//	новаяЗапись = наборЗаписей[0];
	//	предЗначение = новаяЗапись[пИмяПараметра];
	//КонецЕсли;
	//
	//Если новаяЗапись = Неопределено Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//новаяЗапись.Дело = пДело;
	//новаяЗапись[пИмяПараметра] = пПараметр;
	//
	//наборЗаписей.Записать();
	//
	//Возврат Истина;
КонецФункции // СохранитьВЗадачиКВыполнению()

Функция СохранитьОценкуСрок(пДело, пПараметры, пКэшНаборЗаписей = Неопределено, СоздаватьНовую = Истина) Экспорт 
	Если НЕ ЗначениеЗаполнено(пДело) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	текДата = ТекущаяДата();
	
	Если пКэшНаборЗаписей = Неопределено Тогда
		наборЗаписей = РегистрыСведений.ДатыЗадач.СоздатьНаборЗаписей();
	Иначе
		наборЗаписей = пКэшНаборЗаписей;
	КонецЕсли;
	
	наборЗаписей.Отбор.Дело.Установить(пДело);
	наборЗаписей.Отбор.Период.Установить(текДата);
	наборЗаписей.Прочитать();
	
	Если наборЗаписей.Количество() = 0 И СоздаватьНовую Тогда
		новаяЗапись = наборЗаписей.Добавить();
	ИначеЕсли наборЗаписей.Количество() > 0 Тогда
		новаяЗапись = наборЗаписей[0];
	КонецЕсли;
	
	Если новаяЗапись = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	новаяЗапись.Дело = пДело;
	новаяЗапись.Период = текДата;
	Для каждого киз Из пПараметры Цикл
		новаяЗапись[киз.Ключ] = киз.Значение;
	КонецЦикла;
	
	наборЗаписей.Записать();
	
	Возврат Истина;
КонецФункции // СохранитьОценкуСрок()

Процедура ИзмененаОценка(ЗНАЧ пДело, пСтатус, текСрок, пПотрачено, пОсталось = Неопределено, пОценка = Неопределено, пСотрудник = Неопределено) Экспорт 
	Если пСотрудник = Неопределено Тогда
		лСотрудник = ПараметрыСеанса.ТекущийСотрудник;
	Иначе
		лСотрудник = пСотрудник;
	КонецЕсли;
	
	Если пОсталось = Неопределено Тогда
		// есть только оценка
		пОсталось = пОценка - пПотрачено;
	КонецЕсли;
	
	Если пОценка = Неопределено Тогда
		пОценка = пПотрачено + пОсталось;
	КонецЕсли;
	
	КэшНаборЗаписей = Неопределено;
	лПараметры = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(лСотрудник) Тогда
		лПараметры.Вставить("ПланТрудозатрат", пОценка);
		
		ЗадачиКВыполнению.СохранитьОценкуСрок(пДело, лПараметры, КэшНаборЗаписей);
		
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗадачиКВыполнению.Дело,
	|	ЗадачиКВыполнению.Статус,
	|	ЕстьNULL(ДатыЗадач.ПланТрудозатрат, 0) КАК ПланТрудозатрат,
	|	ДатыЗадач.ПлановаяДата КАК Срок,
	|	СУММА(ЕстьNULL(РАЗНОСТЬДАТ(Потрачено.Старт, Потрачено.Завершение, МИНУТА),0) / 60) КАК Потрачено
	|ИЗ
	|	РегистрСведений.ЗадачиКВыполнению КАК ЗадачиКВыполнению
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ДатыЗадач.СрезПоследних КАК ДатыЗадач
	|ПО
	|	ЗадачиКВыполнению.Дело = ДатыЗадач.Дело
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.Дела КАК Потрачено
	|ПО
	|	ЗадачиКВыполнению.Дело = Потрачено.Дело
	|
	|ГДЕ
	|	ЗадачиКВыполнению.Исполнитель = &Исполнитель
	|	И (ЗадачиКВыполнению.Статус = Значение(Перечисление.Статус.КВыполнению)
	|	ИЛИ ЗадачиКВыполнению.Статус = Значение(Перечисление.Статус.ВРаботе))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиКВыполнению.Дело,
	|	ЗадачиКВыполнению.Статус,
	|	ЗадачиКВыполнению.СистемныйПриоритет,
	|	ДатыЗадач.ПлановаяДата,
	|	ЕстьNULL(ДатыЗадач.ПланТрудозатрат, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗадачиКВыполнению.Статус,
	|	ЗадачиКВыполнению.СистемныйПриоритет";
	
	Запрос.УстановитьПараметр("Исполнитель", лСотрудник);
	Запрос.УстановитьПараметр("Дело", пДело);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	идПродолжать = 0;
	Если пСтатус = Перечисления.Статус.ВРаботе Тогда
		// Берем сумму по осталось и добавляем к текущей дате
		// Потом последующие задачи пересчитываем
		общийОсталось = пОсталось;
		
		естьВРаботе = Ложь;
		Для каждого строкаВРаботе Из Выборка Цикл
			// самые первые в работе
			Если строкаВРаботе.Статус = Перечисления.Статус.КВыполнению Тогда
				идПродолжать = Выборка.Индекс(строкаВРаботе);
				Прервать;
			КонецЕсли;
			
			естьВРаботе = Истина;
			
			Если НЕ строкаВРаботе.Дело = пДело Тогда
				текОсталось = строкаВРаботе.ПланТрудозатрат - строкаВРаботе.Потрачено;
				Если текОсталось > 0 Тогда
					общийОсталось = общийОсталось + текОсталось;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если идПродолжать = 0 И естьВРаботе Тогда
			идПродолжать = Выборка.Количество();
		КонецЕсли;
		
		пСрок = Календари.ДобавитьЧасыКДате(ТекущаяДата(), общийОсталось);
		
		Для каждого стракаВыборки Из Выборка Цикл
			// самые первые в работе
			Если стракаВыборки.Статус = Перечисления.Статус.КВыполнению Тогда
				Прервать;
			КонецЕсли;
			
			текДело = стракаВыборки.Дело;
		
			Если текДело = пДело Тогда
				лПараметры.Вставить("ПланТрудозатрат", пОценка);
			Иначе
				лПараметры.Вставить("ПланТрудозатрат", стракаВыборки.ПланТрудозатрат);
			КонецЕсли;
			
			лПараметры.Вставить("ДатаНачала", ТекущаяДата());
			лПараметры.Вставить("ПлановаяДата", пСрок);
		
			ЗадачиКВыполнению.СохранитьОценкуСрок(текДело, лПараметры, КэшНаборЗаписей);
		КонецЦикла;
	Иначе // это уже к выполнению
		// находим предыдущую строку, если есть
		строкаВыборки = Выборка.Найти(пДело, "Дело");
		текИд = Выборка.Индекс(строкаВыборки);
		идПродолжать = текИд + 1;
		
		текИд = текИд - 1;
		Пока текИд >= 0 Цикл
			строкаВыборки = Выборка[текИд];
			Если ЗначениеЗаполнено(строкаВыборки.Срок) Тогда
				пСрок = строкаВыборки.Срок;
				Прервать;
			КонецЕсли;
			
			текИд = текИд - 1;
		КонецЦикла;
		Если НЕ ЗначениеЗаполнено(пСрок) Тогда
			пСрок = ТекущаяДата();
		КонецЕсли;
		
		лПараметры.Вставить("ДатаНачала", пСрок); // сохраним дату от которой считаем плановую дату
		пСрок = Календари.ДобавитьЧасыКДате(пСрок, пОценка);
		
		лПараметры.Вставить("ПланТрудозатрат", пОценка);
		лПараметры.Вставить("ПлановаяДата", пСрок);
		
		ЗадачиКВыполнению.СохранитьОценкуСрок(пДело, лПараметры, КэшНаборЗаписей);
	КонецЕсли;
	
	колво = Выборка.Количество();
	Пока идПродолжать < колво Цикл
		стракаВыборки = Выборка[идПродолжать];
		
		текДело = стракаВыборки.Дело;
		
		лПараметры.Вставить("ДатаНачала", пСрок); // сохраним дату от которой считаем плановую дату
		пСрок = Календари.ДобавитьЧасыКДате(пСрок, стракаВыборки.ПланТрудозатрат);
		
		лПараметры.Вставить("ПланТрудозатрат", стракаВыборки.ПланТрудозатрат);
		лПараметры.Вставить("ПлановаяДата", пСрок);
		
		ЗадачиКВыполнению.СохранитьОценкуСрок(текДело, лПараметры, КэшНаборЗаписей);
		
		идПродолжать = идПродолжать + 1;
	КонецЦикла;
КонецПроцедуры // ИзмененаОценка()

Функция ПеренестиКВыполнениюСервер(ПараметрыДела) Экспорт 
	наборЗаписей = РегистрыСведений.ЗадачиКВыполнению.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Дело.Установить(ПараметрыДела.Дело);
	наборЗаписей.Прочитать();

	этоНоваяЗапись = Ложь;
	Если наборЗаписей.Количество() = 0 Тогда
		этоНоваяЗапись = Истина;
		новаяЗапись = наборЗаписей.Добавить();
	Иначе
		новаяЗапись = наборЗаписей[0];
	КонецЕсли;

	Если этоНоваяЗапись Тогда
		ПараметрыДела.Вставить("Приоритет", Перечисления.Приоритеты.НеУстановлен);
		ПараметрыДела.Вставить("Статус", Перечисления.Статус.Новый);
	
		ЗаполнитьЗначенияСвойств(новаяЗапись, ПараметрыДела);
	Иначе
		новаяЗапись.Статус = Перечисления.Статус.Новый;
	    новаяЗапись.СистемныйПриоритет = 0;
	КонецЕсли;
	
	наборЗаписей.Записать();
	
	Если ПараметрыДела.ПереноситьКомментарии Тогда
		КомментыДел = РегистрыСведений.КомментыДел.СоздатьНаборЗаписей();
		КомментыДел.Отбор.Дело.Установить(ПараметрыДела.Ссылка);
		КомментыДел.Прочитать();
		
		Для каждого лЗапись Из КомментыДел Цикл
			лЗапись.Дело = ПараметрыДела.Дело;
		КонецЦикла;
		
		КомментыДел.Отбор.Дело.Установить(ПараметрыДела.Дело);
		КомментыДел.Записать();
 КонецЕсли;
	
	КомментарииСервер.ЗаписатьВРегистрСтатусПоручения(новаяЗапись.Дело, "Задача перенесена с список задач выполнения");
	
	Если этоНоваяЗапись Тогда
		// Проект
		МодульДел.ОбновитьГруппуДел(ПараметрыДела.Дело, Константы.ПроектРазвития.Получить());
	КонецЕсли;
КонецФункции // ПеренестиКВыполнениюСервер()

