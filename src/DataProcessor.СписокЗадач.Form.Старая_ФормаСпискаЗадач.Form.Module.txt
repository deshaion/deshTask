
&НаКлиенте
Перем мВведенныйТекст;

&НаКлиенте
Перем ПодобранныеЗначения;

&НаКлиенте
Перем фНоваяСтрока;

&НаКлиенте
Перем фПроверкаТекущаяСтрока;

&НаКлиенте
Перем фПроектыМантиса;

&НаКлиенте
Перем фтекПроектМантиса;

//&НаКлиенте
//Перем СписокРазработчиков;

/////////////////////////////////////////////////////////////////////

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруСтатусов()
	лСтатусы = Новый Структура;
	
	Для каждого лПеречисление Из Метаданные.Перечисления.Статус.ЗначенияПеречисления Цикл
		лСтатусы.Вставить(лПеречисление.Имя, Ложь);
	КонецЦикла;
	
	Возврат лСтатусы;
КонецФункции // ПолучитьСтруктуруСтатусов()

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПриоритетов()
	лПриоритеты = Новый Структура;
	
	Для каждого лПеречисление Из Метаданные.Перечисления.Приоритеты.ЗначенияПеречисления Цикл
		лПриоритеты.Вставить(лПеречисление.Имя, Ложь);
	КонецЦикла;
	
	Возврат лПриоритеты;
КонецФункции // ПолучитьСтруктуруСтатусов()

&НаСервере
Функция ЗаполнитьЗадачи(пСтатусы, пПриоритеты, пПроекты, ЗНАЧ пСтрокаПоиска)
	таблица = РеквизитФормыВЗначение("СписокЗадач");
	таблица.Очистить();
	
	строкаОтбора = "";
	
	строкаОтбораПриоритета = "";
	Для каждого лПриоритет Из пПриоритеты Цикл
		Если лПриоритет.Значение Тогда
			строкаОтбораПриоритета = строкаОтбораПриоритета + " ИЛИ ЗадачиКВыполнению.Приоритет = Значение(Перечисление.Приоритеты." + лПриоритет.Ключ + ")";
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(строкаОтбораПриоритета) Тогда
		строкаОтбора = строкаОтбора + " И (" + Сред(строкаОтбораПриоритета, 6) + ")";
	КонецЕсли;
	
	строкаОтбораСтатуса = "";
	Для каждого лСтатус Из пСтатусы Цикл
		Если лСтатус.Значение Тогда
			строкаОтбораСтатуса = строкаОтбораСтатуса + " ИЛИ ЗадачиКВыполнению.Статус = Значение(Перечисление.Статус." + лСтатус.Ключ + ")";
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(строкаОтбораСтатуса) Тогда
		строкаОтбора = строкаОтбора + " И (" + Сред(строкаОтбораСтатуса, 6) + ")";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(пПроекты) Тогда
		строкаОтбора = строкаОтбора + " И ЗадачиКВыполнению.Дело.ГруппаДел В (&Проекты)";
	КонецЕсли;
	
	таблицаПолей = РеквизитФормыВЗначение("Поля");
	текстЗапросаПолей = "ЗадачиКВыполнению.СистемныйПриоритет КАК СистемныйПриоритет";
	текстЗапросаУпорядочивания = "";
	Для каждого лПоле Из таблицаПолей Цикл
		Если лПоле.Выбран Тогда
			текстЗапросаПолей = текстЗапросаПолей + лПоле.СистемноеПоле;
		КонецЕсли;
		Если лПоле.Упорядочивать Тогда
			текстЗапросаУпорядочивания = текстЗапросаУпорядочивания + лПоле.сисПолеПорядок;
			Если лПоле.Убыв Тогда
				текстЗапросаУпорядочивания = текстЗапросаУпорядочивания + " УБЫВ";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если текстЗапросаУпорядочивания = "" Тогда
		текстЗапросаУпорядочивания = "СистемныйПриоритет";
	Иначе // удалим первую запятую
		текстЗапросаУпорядочивания = Сред(текстЗапросаУпорядочивания, 2);
	КонецЕсли;
	
	// строку поиска разберем
	пСтрокаПоиска = СтрЗаменить(пСтрокаПоиска, " ", Символы.ПС);
	перваяПодстрока = Истина;
	
	подСтрокаОтбора = "";
	Для идСтроки  = 1 По СтрЧислоСтрок(пСтрокаПоиска) Цикл
		подстрока = СтрПолучитьСтроку(пСтрокаПоиска, идСтроки);
		
		подСтрокаОтбора = подСтрокаОтбора + ?(перваяПодстрока, "", " ИЛИ") + " 
		|(ЗадачиКВыполнению.Дело.Наименование ПОДОБНО ""%"+ подстрока +"%""
		|ИЛИ ЗадачиКВыполнению.Дело.ГруппаДел.Наименование ПОДОБНО ""%"+ подстрока +"%"")";
		
		перваяПодстрока = Ложь;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(подСтрокаОтбора) Тогда
		строкаОтбора = строкаОтбора + " И (" + подСтрокаОтбора + ")";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ГолосаДел.Дело,
	|	СРЕДНЕЕ(ГолосаДел.СистемныйПриоритет) КАК КоличествоГолосов
	|ПОМЕСТИТЬ ГолосаДел
	|ИЗ
	|	РегистрСведений.ГолосаДел КАК ГолосаДел
	|СГРУППИРОВАТЬ ПО
	|	ГолосаДел.Дело
	|;
	|//////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Факт.Дело,
	|	СУММА(РАЗНОСТЬДАТ(Факт.Старт, Факт.Завершение, МИНУТА) / 60) КАК Потрачено
	|ПОМЕСТИТЬ Факт
	|ИЗ
	|	РегистрСведений.Дела КАК Факт
	|СГРУППИРОВАТЬ ПО
	|	Факт.Дело
	|;
	|//////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖесткиеДатыЗадач.Дело,
	|	МАКСИМУМ(ЖесткиеДатыЗадач.Трудозатраты) КАК Трудозатраты,
	|	МАКСИМУМ(ЖесткиеДатыЗадач.КрайнийСрок) КАК КрайнийСрок
	|ПОМЕСТИТЬ ЖесткиеДатыЗадач
	|ИЗ
	|	РегистрСведений.ЖесткиеДатыЗадач КАК ЖесткиеДатыЗадач
	|СГРУППИРОВАТЬ ПО
	|	ЖесткиеДатыЗадач.Дело
	|;
	|//////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	"+ текстЗапросаПолей +"
	|ИЗ
	|	РегистрСведений.ЗадачиКВыполнению КАК ЗадачиКВыполнению
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ДатыЗадач.СрезПоследних КАК ДатыЗадач
	|ПО
	|	ЗадачиКВыполнению.Дело = ДатыЗадач.Дело
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ЖесткиеДатыЗадач КАК ТвердыеДатыЗадач
	|ПО
	|	ЗадачиКВыполнению.Дело = ТвердыеДатыЗадач.Дело
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ГолосаДел КАК ГолосаДел
	|ПО
	|	ЗадачиКВыполнению.Дело = ГолосаДел.Дело
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Факт КАК Факт
	|ПО
	|	ЗадачиКВыполнению.Дело = Факт.Дело
	|ГДЕ
	|	ИСТИНА
	|	"+ строкаОтбора +"
	|УПОРЯДОЧИТЬ ПО
	|	"+ текстЗапросаУпорядочивания +"
	|";
	
	Запрос.УстановитьПараметр("Проекты", пПроекты);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(таблица.Добавить(), Выборка);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(таблица, "СписокЗадач");
КонецФункции // ЗаполнитьЗадачи()

&НаКлиенте
Процедура ОбновитьЗадачи()
	лСтатусы = ПолучитьСтруктуруСтатусов();
	Для каждого кИз Из лСтатусы Цикл
		лСтатусы.Вставить(кИз.Ключ, ЭтаФорма["ф" + КиЗ.Ключ]);
	КонецЦикла;
	
	лПриоритеты = ПолучитьСтруктуруПриоритетов();
	Для каждого кИз Из лПриоритеты Цикл
		лПриоритеты.Вставить(кИз.Ключ, ЭтаФорма["ф" + КиЗ.Ключ]);
	КонецЦикла;
	
	ЗаполнитьЗадачи(лСтатусы, лПриоритеты, ОтборПроектов, СтрокаПоиска);
	
	Для каждого лПоле Из Поля Цикл
		Элементы[лПоле.сисЭлементФормы].Видимость = лПоле.Выбран;
	КонецЦикла;
КонецПроцедуры // ОбновитьЗадачи()

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьЗадачи();
КонецПроцедуры

&НаСервере
Функция ЭтоГлавнаяРоль()
	Если ПараметрыСеанса.РольСотрудника = Перечисления.РолиСотрудников.ПолныеПрава Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции // ЭтоГлавнаяРоль()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	фНоваяСтрока = Ложь;
	
	фНовый = Истина;
	фДопИнформация = Истина;
	фНазначен = Истина;
	фВРаботе = Истина;
	фКВыполнению = Истина;
	
	Элементы.ГруппаОтборСтатусов.Видимость = ЕстьОтборСтатусов;
	Элементы.ГруппаОтборПриоритетов.Видимость = ЕстьОтборПриоритетов;
	Элементы.ГруппаОтборПроектов.Видимость = ЕстьОтборПроектов;
	Элементы.ГруппаОтборПолей.Видимость = ЕстьОтборПолей;
	Элементы.ИсторияСобытий.Видимость = ЕстьКомментарии;
	
	ОбновитьЗадачи();
	
	Если ЭтоГлавнаяРоль() Тогда
		ПодключитьОбработчикОжидания("ооОбновитьМантис", 300);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("клОбновитьОписание", 15);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтборСтатусов(Команда)
	ЕстьОтборСтатусов = НЕ ЕстьОтборСтатусов;
	Элементы.ГруппаОтборСтатусов.Видимость = ЕстьОтборСтатусов;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтборПриоритетов(Команда)
	ЕстьОтборПриоритетов = НЕ ЕстьОтборПриоритетов;
	Элементы.ГруппаОтборПриоритетов.Видимость = ЕстьОтборПриоритетов;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтборПроектов(Команда)
	ЕстьОтборПроектов = НЕ ЕстьОтборПроектов;
	Элементы.ГруппаОтборПроектов.Видимость = ЕстьОтборПроектов;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКомментарии(Команда)
	ЕстьКомментарии = НЕ ЕстьКомментарии;
	Элементы.ИсторияСобытий.Видимость = ЕстьКомментарии;
КонецПроцедуры

&НаКлиенте
Процедура Поля(Команда)
	ЕстьОтборПолей = НЕ ЕстьОтборПолей;
	Элементы.ГруппаОтборПолей.Видимость = ЕстьОтборПолей;
КонецПроцедуры

&НаСервере
Функция ПечатьСервер()
	вывод = Новый ТабличныйДокумент;
	
	макет = Обработки.СписокЗадач.ПолучитьМакет("Задачи");
	
	шапка = макет.ПолучитьОбласть("Шапка");
	
	вывод.Вывести(шапка);
	
	Для каждого элементЗадачи Из СписокЗадач Цикл
		строка = макет.ПолучитьОбласть("Строка");
		строка.Параметры.Наименование = элементЗадачи.Дело;
		строка.Параметры.Проект = элементЗадачи.Проект;
		строка.Параметры.Статус = элементЗадачи.Статус;
		строка.Параметры.Исполнитель = элементЗадачи.Исполнитель;
		строка.Параметры.Оценка = элементЗадачи.Оценка;
		строка.Параметры.Срок = элементЗадачи.Срок;
		вывод.Вывести(строка);
		
		описание = макет.ПолучитьОбласть("ОписаниеЗадачи");
		описание.Параметры.Описание = элементЗадачи.Дело.Описание;
		вывод.Вывести(описание);
	КонецЦикла;
	
	Возврат вывод;
КонецФункции // ПечатьСервер()

&НаКлиенте
Процедура Печать(Команда)
	табДокумент = ПечатьСервер();
	
	табДокумент.Показать("Задачи");
КонецПроцедуры

////////////////////////////////////////////////////////////////////
// МАНТИС

&НаКлиенте
Процедура ОбновитьИзМантиса(Команда)
	//режимОтладки = Отладка.РежимОтладки();
	//
	//Если режимОтладки Тогда
	//	МантисКлиентСервер.ОбновитьВсеПроектыИзМантиса(Неопределено);
	//	ОбновитьЗадачи();
	//	Возврат;
	//КонецЕсли;
	
		
	ОбновитьЗадачи();
КонецПроцедуры

&НаКлиенте
Процедура ооОбновитьМантис()
	
	
	ОбновитьЗадачи();
КонецПроцедуры // ооОбновитьМантис()

////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ДобавитьПоле(пТаблица, пПоле, пСистемноеПоле, пСисЭлементФормы, пСисПолеПорядок = Неопределено, пВыбран = Истина)
	новСтрока = пТаблица.Добавить();
	новСтрока.Поле = пПоле;
	новСтрока.СистемноеПоле = пСистемноеПоле;
	новСтрока.сисЭлементФормы = пСисЭлементФормы;
	Если пСисПолеПорядок = Неопределено Тогда
		новСтрока.сисПолеПорядок = пСистемноеПоле;
	Иначе
		новСтрока.сисПолеПорядок = пСисПолеПорядок;
	КонецЕсли;
	новСтрока.Выбран = пВыбран;
КонецПроцедуры // ДобавитьПоле()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	таблица = РеквизитФормыВЗначение("Поля");
	
	ДобавитьПоле(таблица, "Задача"			,",ЗадачиКВыполнению.Дело"						,"СписокЗадачДело");
	ДобавитьПоле(таблица, "Проект"			,",ЗадачиКВыполнению.Дело.ГруппаДел КАК Проект"	,"СписокЗадачПроект",",ЗадачиКВыполнению.Дело.ГруппаДел");
	ДобавитьПоле(таблица, "Приоритет"		,",ЗадачиКВыполнению.Приоритет"					,"СписокЗадачПриоритет", , Ложь);
	ДобавитьПоле(таблица, "Статус"			,",ЗадачиКВыполнению.Статус"					,"СписокЗадачСтатус");
	ДобавитьПоле(таблица, "Исполнитель"		,",ЗадачиКВыполнению.Исполнитель"				,"СписокЗадачИсполнитель");
	ДобавитьПоле(таблица, "Дата добавления"	,",ЗадачиКВыполнению.ДатаДобавления"			,"СписокЗадачДатаДобавления", , Ложь);
	ДобавитьПоле(таблица, "Оценка"			,",ДатыЗадач.ПланТрудозатрат КАК Оценка"		,"СписокЗадачОценка", ",ДатыЗадач.ПланТрудозатрат");
	ДобавитьПоле(таблица, "Срок"			,",ДатыЗадач.ПлановаяДата КАК Срок"				,"СписокЗадачСрок", ",ДатыЗадач.ПлановаяДата");
	ДобавитьПоле(таблица, "КоличествоГолосов",",ГолосаДел.КоличествоГолосов", "СписокЗадачКоличествоГолосов");
	
	//ДобавитьПоле(таблица, "ТекущаяОценка",",ГолосаДел.КоличествоГолосов", "СписокЗадачКоличествоГолосов");
	ДобавитьПоле(таблица, "Потрачено",",Факт.Потрачено", "СписокЗадачПотрачено");
	ДобавитьПоле(таблица, "Осталось",",ДатыЗадач.ПланТрудозатрат - ЕстьNULL(Факт.Потрачено, 0) КАК Осталось", "СписокЗадачОсталось");
	
	ДобавитьПоле(таблица, "ПерваяОценка",",ТвердыеДатыЗадач.Трудозатраты КАК ПерваяОценка", "СписокЗадачПерваяОценка");
	ДобавитьПоле(таблица, "КрайнийСрок",",ТвердыеДатыЗадач.КрайнийСрок КАК КрайнийСрок", "СписокЗадачКрайнийСрок");
	
	ЗначениеВРеквизитФормы(таблица, "Поля");
	
	// список разработчиков попробуем получить
	Если ПараметрыСеанса.РольСотрудника = Перечисления.РолиСотрудников.ПолныеПрава
		ИЛИ ПараметрыСеанса.РольСотрудника = Перечисления.РолиСотрудников.ОпытныйРазработчик Тогда
		лСписокРазработчиков = Пользователи.ПолучитьСписокРазработчиков();
	Иначе
		лСписокРазработчиков = Новый Массив;
		лСписокРазработчиков.Добавить(ПараметрыСеанса.ТекущийСотрудник);
	КонецЕсли;
	
	ид = -1;
	Для каждого текРазработчик Из лСписокРазработчиков Цикл
		ид = ид + 1;
		
		имяКоманды = "_" + ид;
		текКоманда = Команды.Добавить(имяКоманды);
		текКоманда.Действие = "ДействиеРазработчик";
		текКоманда.Заголовок = текРазработчик;
		
		текКнопка = Элементы.Добавить(имяКоманды, Тип("КнопкаФормы"), Элементы.Разработчики);
		текКнопка.ИмяКоманды = имяКоманды;
		
		СписокРазработчиков.Добавить(текРазработчик);
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОткрытьЗадачу(Команда)
	текДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	п = Новый Структура("Ключ", текДанные.Дело);
	ОткрытьФорму("Справочник.Дело.ФормаОбъекта", п);
КонецПроцедуры

////////////////////////////////////////////////////////////////////
// ЗАПИСЬ В РЕГИСТР ДатыЗадач

&НаСервере
Функция СохранитьОценкуСрок(пДело, пПараметр, пИмяПараметра)
	Если НЕ ЗначениеЗаполнено(пДело) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	текДата = ТекущаяДата();
	
	наборЗаписей = РегистрыСведений.ДатыЗадач.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Дело.Установить(пДело);
	наборЗаписей.Отбор.Период.Установить(текДата);
	наборЗаписей.Прочитать();
	
	Если наборЗаписей.Количество() = 0 Тогда
		новаяЗапись = наборЗаписей.Добавить();
	Иначе
		новаяЗапись = наборЗаписей[0];
	КонецЕсли;
	
	новаяЗапись.Дело = пДело;
	новаяЗапись.Период = текДата;
	новаяЗапись[пИмяПараметра] = пПараметр;
	
	наборЗаписей.Записать();
	
	Возврат Истина;
КонецФункции // СохранитьОценкуСрок()

&НаКлиенте
Процедура СписокЗадачОценкаПриИзменении(Элемент)
	текДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если текДанные = Неопределено ИЛИ фНоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	//СохранитьОценкуСрок(текДанные.Дело, текДанные.Оценка, "ПланТрудозатрат");
	
	ЗадачиКВыполнению.ИзмененаОценка(текДанные.Дело, текДанные.Статус, текДанные.Срок, текДанные.Потрачено, , текДанные.Оценка, текДанные.Исполнитель);
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачОсталосьПриИзменении(Элемент)
	текДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если текДанные = Неопределено ИЛИ фНоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	//СохранитьОценкуСрок(текДанные.Дело, текДанные.Оценка, "ПланТрудозатрат");
	
	ЗадачиКВыполнению.ИзмененаОценка(текДанные.Дело, текДанные.Статус, текДанные.Срок, текДанные.Потрачено, текДанные.Осталось, , текДанные.Исполнитель);
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачСрокПриИзменении(Элемент)
	текДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если текДанные = Неопределено ИЛИ фНоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	СохранитьОценкуСрок(текДанные.Дело, текДанные.Срок, "ПлановаяДата");
КонецПроцедуры

////////////////////////////////////////////////////////////////////
// ЗАПИСЬ В РЕГИСТР ЖесткиеДатыЗадач

&НаСервере
Функция СохранитьТвердыеДатыЗадач(пДело, пПараметр, пИмяПараметра)
	Если НЕ ЗначениеЗаполнено(пДело) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	текСотрудник = ПараметрыСеанса.ТекущийСотрудник;
	
	наборЗаписей = РегистрыСведений.ЖесткиеДатыЗадач.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Дело.Установить(пДело);
	наборЗаписей.Отбор.Сотрудник.Установить(текСотрудник);
	наборЗаписей.Прочитать();
	
	Если наборЗаписей.Количество() = 0 Тогда
		новаяЗапись = наборЗаписей.Добавить();
	Иначе
		новаяЗапись = наборЗаписей[0];
	КонецЕсли;
	
	новаяЗапись.Дело = пДело;
	новаяЗапись.Сотрудник = текСотрудник;
	новаяЗапись[пИмяПараметра] = пПараметр;
	
	наборЗаписей.Записать();
	
	Возврат Истина;
КонецФункции // СохранитьОценкуСрок()

&НаКлиенте
Процедура СписокЗадачКрайнийСрокПриИзменении(Элемент)
	текДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если текДанные = Неопределено ИЛИ фНоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	СохранитьТвердыеДатыЗадач(текДанные.Дело, текДанные.КрайнийСрок, "КрайнийСрок");
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачПерваяОценкаПриИзменении(Элемент)
	текДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если текДанные = Неопределено ИЛИ фНоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	СохранитьТвердыеДатыЗадач(текДанные.Дело, текДанные.ПерваяОценка, "Трудозатраты");
КонецПроцедуры

////////////////////////////////////////////////////////////////////
// ЗАПИСЬ В РЕГИСТР ЗадачиКВыполнению

&НаКлиенте
Процедура СписокЗадачПриоритетПриИзменении(Элемент)
	текДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если текДанные = Неопределено ИЛИ фНоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(текДанные.Дело, текДанные.Приоритет, "Приоритет");
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачСтатусПриИзменении(Элемент)
	текДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если текДанные = Неопределено ИЛИ фНоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	Статусы.ИзменитьСтатус(текДанные.Дело, текДанные.Статус);
	
	//ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(текДанные.Дело, текДанные.Статус, "Статус");
	//
	//новыйСисПриоритет = Статусы.НовыйСистемныйПриоритет(текДанные.Статус);
	//
	//Если НЕ новыйСисПриоритет = Неопределено Тогда
	//	текДанные.СистемныйПриоритет = новыйСисПриоритет;
	//	СписокЗадачСистемныйПриоритетПриИзменении(Неопределено);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачИсполнительПриИзменении(Элемент)
	текДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если текДанные = Неопределено ИЛИ фНоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(текДанные.Дело, текДанные.Исполнитель, "Исполнитель");
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачСистемныйПриоритетПриИзменении(Элемент)
	текДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если текДанные = Неопределено ИЛИ фНоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	предЗначение = Неопределено;
	ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(текДанные.Дело, текДанные.СистемныйПриоритет, "СистемныйПриоритет", предЗначение);
	Статусы.ПереписатьСледующиеПриоритеты(текДанные.Дело, текДанные.СистемныйПриоритет, предЗначение);
КонецПроцедуры

// ::::::::::::: ::::::::::::: :::::::::::::: ::::::::::::::::::: :::::::::::::: :::::::::::
// ФУНКЦИИ АВТО ПОДБОРА

&НаКлиенте
Процедура СписокЗадачДелоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	МодульДел.ОбработкаВыбора(ВыбранноеЗначение, СтандартнаяОбработка, мВведенныйТекст);
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачДелоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	МодульДел.Подбор(Текст, ДанныеВыбора, СтандартнаяОбработка, мВведенныйТекст, ПодобранныеЗначения, , );
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачДелоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	подобранноеЗначение = ПодобранныеЗначения[Текст];
	Если НЕ подобранноеЗначение = Неопределено Тогда
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(подобранноеЗначение);
	Иначе
		МодульДел.Подбор(Текст, ДанныеВыбора, СтандартнаяОбработка, мВведенныйТекст, ПодобранныеЗначения);
	КонецЕсли;
КонецПроцедуры

// ::::::::::::: ::::::::::::: :::::::::::::: ::::::::::::::::::: :::::::::::::: :::::::::::

&НаСервере
Функция СохранитьНовуюСтрокуВРегистры(текДанные)
	// ЗадачиКВыполнению
	наборЗаписей = РегистрыСведений.ЗадачиКВыполнению.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Дело.Установить(текДанные.Дело);
	наборЗаписей.Прочитать();

	Если наборЗаписей.Количество() = 0 Тогда
		новаяЗапись = наборЗаписей.Добавить();
	Иначе
		новаяЗапись = наборЗаписей[0];
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(новаяЗапись, текДанные);
	
	новаяЗапись.ДатаДобавления = ТекущаяДата();

	наборЗаписей.Записать();
	
	// ДатыЗадач
	//наборЗаписей = РегистрыСведений.ДатыЗадач.СоздатьНаборЗаписей();
	//наборЗаписей.Отбор.Дело.Установить(текДанные.Дело);
	//наборЗаписей.Прочитать();
	//
	//Если наборЗаписей.Количество() = 0 Тогда
	//	новаяЗапись = наборЗаписей.Добавить();
	//Иначе
	//	новаяЗапись = наборЗаписей[0];
	//КонецЕсли;
	//
	//ЗаполнитьЗначенияСвойств(новаяЗапись, текДанные);
	//
	//наборЗаписей.Записать();
	
	// Проект
	МодульДел.ОбновитьГруппуДел(текДанные.Дело, текДанные.Проект);
	
КонецФункции // СохранитьНовуюСтрокуВРегистры()

&НаКлиенте
Процедура СписокЗадачПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		фНоваяСтрока = Ложь;
		Возврат;
	КонецЕсли;
	Если фНоваяСтрока Тогда
		текДанные = Элементы.СписокЗадач.ТекущиеДанные;
		
		имяСписка = "СписокЗадач";
		
		структураДанных = Новый Структура;
		Для каждого лКолонка Из Элементы.СписокЗадач.ПодчиненныеЭлементы Цикл
			лИмя = СтрЗаменить(лКолонка.Имя, имяСписка, "");
			
			структураДанных.Вставить(лИмя, текДанные[лИмя]);
		КонецЦикла;
		СохранитьНовуюСтрокуВРегистры(структураДанных);
		
		фНоваяСтрока = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначенияПоУмолчаниюНовойСтроки()
	поУмолч = Новый Структура;
	
	поУмолч.Вставить("Статус", Перечисления.Статус.Новый);
	поУмолч.Вставить("Приоритет", Перечисления.Приоритеты.Низкий);
	поУмолч.Вставить("СистемныйПриоритет", 0);
	
	Возврат поУмолч;
КонецФункции // ПолучитьЗначенияПоУмолчаниюНовойСтроки()

&НаКлиенте
Процедура СписокЗадачПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	текДанные = Элементы.СписокЗадач.ТекущиеДанные;
	
	Если НоваяСтрока ИЛИ НЕ ЗначениеЗаполнено(текДанные.Дело) Тогда
		фНоваяСтрока = Истина;
		
		значенияПоУмолчанию = ПолучитьЗначенияПоУмолчаниюНовойСтроки();
		
		ЗаполнитьЗначенияСвойств(текДанные, значенияПоУмолчанию);
	КонецЕсли;
КонецПроцедуры

// ::::::::::::: ::::::::::::: :::::::::::::: ::::::::::::::::::: :::::::::::::: :::::::::::

&НаКлиенте
Процедура СписокЗадачПроектПриИзменении(Элемент)
	текДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если текДанные = Неопределено ИЛИ фНоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	МодульДел.ОбновитьГруппуДел(текДанные.Дело, текДанные.Проект);
КонецПроцедуры

// ::::::::::::: ::::::::::::: :::::::::::::: ::::::::::::::::::: :::::::::::::: :::::::::::

&НаКлиенте
Процедура ОтдатьГолос(Команда)
	текДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если текДанные = Неопределено ИЛИ фНоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	ключЗаписи = Голоса.СохранитьГолос(текДанные.Дело);
	
	Оповестить("ОбновитьКонтролируемыеЗадачи");
КонецПроцедуры

&НаСервере
Функция естьГолос(пДело)
	пСотрудник = ПараметрыСеанса.ТекущийСотрудник;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ГолосаДел.Дело,
	|	ГолосаДел.Голос
	|ИЗ
	|	РегистрСведений.ГолосаДел КАК ГолосаДел
	|ГДЕ
	|	ГолосаДел.Дело = &Дело
	|	И ГолосаДел.Голос = &Голос";
	
	Запрос.УстановитьПараметр("Дело", пДело);
	Запрос.УстановитьПараметр("Голос", пСотрудник);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции // естьГолос()

&НаСервере
Функция ПолучитьПараметрыОтображения()
	списокПараметров = Новый Структура;
	
	лПараметры = Новый Структура;
	Если ПараметрыСеанса.РольСотрудника = Перечисления.РолиСотрудников.ПолныеПрава
		ИЛИ ПараметрыСеанса.РольСотрудника = Перечисления.РолиСотрудников.ОпытныйРазработчик Тогда
		лПараметры.Вставить("ТолькоПросмотр", ЛОЖЬ);
	Иначе
		лПараметры.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	списокПараметров.Вставить("СписокЗадачСтатус", лПараметры);
	
	Возврат списокПараметров;
КонецФункции

&НаКлиенте
Процедура СписокЗадачПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущаяСтрока = фПроверкаТекущаяСтрока Тогда
 		Возврат;
	КонецЕсли;

	фПроверкаТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	текДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	естьГолос = естьГолос(текДанные.Дело);
	
	Элементы.СписокЗадачКонтекстноеМенюОтдатьГолос.Заголовок = ?(естьГолос, "Задача уже не важна :(", "Задача важна! На контроль!");
	
	// в зависимости от прав дадим или запретим редактировать всякие поля
	списокПараметров = ПолучитьПараметрыОтображения();
	Для каждого строкаПараметра Из списокПараметров Цикл
		Для каждого лСвойство Из строкаПараметра.Значение Цикл
			Элементы[строкаПараметра.Ключ][лСвойство.Ключ] = лСвойство.Значение;
		КонецЦикла;
	КонецЦикла;
	
	клОбновитьОписание();
КонецПроцедуры

// ::::::::::::: ::::::::::::: :::::::::::::: ::::::::::::::::::: :::::::::::::: :::::::::::
// ФУНКЦИИ КОММЕНТИРОВАНИЯ

&НаКлиенте
Процедура клОбновитьОписание()
	текДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если текДанные = Неопределено ИЛИ фНоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	ПолеИстории = КомментарииСервер.ПолучитьОписание(текДанные.Дело);
КонецПроцедуры // клОбновитьОписание()

&НаКлиенте
Процедура СменитьСтатусПоручения(текДело = Неопределено)
	Если текДело = Неопределено Тогда
		текДело = Элементы.СписокЗадач.ТекущиеДанные;
	КонецЕсли;
	
	Если текДело = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомментарийДела = СтрЗаменить(ПолеКомментария, Символы.ПС, "<br>");
	ПолеКомментария = "";
	
	КомментарииКлиент.УстановитьСтатусПоручения(текДело.Дело, КомментарийДела);
	
	клОбновитьОписание();
КонецПроцедуры // СменитьСтатусПоручения()

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	СменитьСтатусПоручения();
КонецПроцедуры

// ::::::::::::: ::::::::::::: :::::::::::::: ::::::::::::::::::: :::::::::::::: :::::::::::

&НаКлиенте
Процедура ДействиеРазработчик(Команда)
	выбранныеСтроки = Элементы.СписокЗадач.ВыделенныеСтроки;
	
	ид = Число(Сред(Команда.Имя, 2));
	
	поменятьНА = СписокРазработчиков[ид].Значение;
	
	Для каждого выбраннаяСтрока Из выбранныеСтроки Цикл
		текДанные = СписокЗадач.НайтиПоИдентификатору(выбраннаяСтрока);
		Если текДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПереназначитьНа(текДанные.Дело, поменятьНА, текДанные.Статус);
	КонецЦикла;
	
	ОбновитьЗадачи();
КонецПроцедуры

&НаСервере
Функция ПереназначитьНа(пДело, пИсполнитель, пПредСтатус)
	статусНА = Перечисления.Статус.КВыполнению;
	
	Если    пПредСтатус = Перечисления.Статус.Закрыт
		ИЛИ пПредСтатус = Перечисления.Статус.Решен
		ИЛИ пПредСтатус = Перечисления.Статус.Уточняется Тогда
		
		Статусы.ИзменитьСтатус(пДело, Перечисления.Статус.ДопИнформация);
	КонецЕсли;
	ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(пДело, пИсполнитель, "Исполнитель");
	Статусы.ИзменитьСтатус(пДело, статусНА);
КонецФункции // ПереназначитьНа()

&НаКлиенте
Процедура ПеренестиВПожелания(Команда)
	ответ = Вопрос("Задача будут удалены из списка задач и добавлены в список пожеланий, а также их статус изменится на ""уточняются"". Продолжить?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена);
	Если ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	выбранныеСтроки = Элементы.СписокЗадач.ВыделенныеСтроки;
	
	Для каждого выбраннаяСтрока Из выбранныеСтроки Цикл
		текДанные = СписокЗадач.НайтиПоИдентификатору(выбраннаяСтрока);
		Если текДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПеренестиВПожеланияСервер(текДанные.Дело);
	КонецЦикла;
	
	ОбновитьЗадачи();
КонецПроцедуры

Функция ПеренестиВПожеланияСервер(пДело)
	// Исполнитель - пусто
	// Статус - уточняется
	// Добавляем комментарий
	
	ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(пДело, Справочники.Сотрудники.ПустаяСсылка(), "Исполнитель");

	Статусы.ИзменитьСтатус(пДело, Перечисления.Статус.Уточняется);
	
	// ЗадачиКПожеланию
	наборЗаписей = РегистрыСведений.ЗадачиКПожеланию.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Дело.Установить(пДело);
	наборЗаписей.Прочитать();

	Если наборЗаписей.Количество() = 0 Тогда
		новаяЗапись = наборЗаписей.Добавить();
	Иначе
		Возврат Истина;
	КонецЕсли;

	новаяЗапись.Дело = пДело;
 	новаяЗапись.Статус = Перечисления.Статус.Новый;
 	новаяЗапись.Автор = ПараметрыСеанса.ТекущийСотрудник;
 	новаяЗапись.ДатаДобавления = ТекущаяДата();

	наборЗаписей.Записать();
	
	// запишем полностью сообщение в качестве комментария
	КомментарийДела = "Обращение перенесено в пожелания";
	КомментарииСервер.ЗаписатьВРегистрСтатусПоручения(пДело, КомментарийДела);
КонецФункции // ПеренестиВПожеланияСервер()

