Функция СоздатьНовоеДело(имяДела) Экспорт 
	новоеДело = Справочники.Дело.СоздатьЭлемент();
	новоеДело.Наименование = имяДела;
	новоеДело.Записать();
	
	Возврат новоеДело.Ссылка;
КонецФункции // СоздатьНовоеДело()

Функция НайтиВДелах(Текст, пПодобранныеЗначения, пПараметры)
	СоздаватьНовый = пПараметры.СоздаватьНовый;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Дело.Ссылка,
	|	Дело.ГруппаДел.Наименование + ""::"" + Дело.Наименование КАК Наименование
	|ПОМЕСТИТЬ списокДел
	|ИЗ
	|	Справочник.Дело КАК Дело
	|ГДЕ
	|	Дело.Наименование ПОДОБНО &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Дело.Ссылка,
	|	Дело.ГруппаДел.Наименование + ""::"" + Дело.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Дело КАК Дело
	|ГДЕ
	|	Дело.ГруппаДел.Наименование ПОДОБНО &Наименование
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ первые 50
	|	Дела.Ссылка,
	|	Дела.Наименование КАК Наименование
	|ИЗ
	|	СписокДел КАК Дела
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЗадачиКВыполнению КАК Параметры
	|ПО
	|	Дела.Ссылка = Параметры.Дело
	|ГДЕ
	|	Параметры.Статус Есть NULL
	|	ИЛИ НЕ Параметры.Статус В (&Статусы)
	|";
	
	Запрос.Параметры.Вставить("Наименование", "%" + Текст + "%");
	Запрос.Параметры.Вставить("Статусы", пПараметры.СписокСтатусовИсключений);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	список = Новый СписокЗначений;
	пПодобранныеЗначения = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		список.Добавить(Выборка.Ссылка, Выборка.Наименование);
		
		пПодобранныеЗначения.Вставить(Выборка.Наименование, Выборка.Ссылка);
	КонецЦикла;
	
	Если список.Количество() = 0 И СоздаватьНовый Тогда
		// создадим новое значение справочника
		список.Добавить(СоздатьНовоеДело(Текст));
	КонецЕсли;
	
	Возврат список;
КонецФункции // НайтиВДелах()

Процедура ОбработкаВыбора(ВыбранноеЗначение, СтандартнаяОбработка, мВведенныйТекст) Экспорт 
	Если ВыбранноеЗначение = "СоздатьНовый" Тогда
		ВыбранноеЗначение = СоздатьНовоеДело(мВведенныйТекст);
	КонецЕсли;
КонецПроцедуры

Процедура Подбор(Текст, ДанныеВыбора, СтандартнаяОбработка, мВведенныйТекст, ПодобранныеЗначения, СоздаватьНовый = Ложь, пПараметры = Неопределено) Экспорт 
	СтандартнаяОбработка = Ложь;
	
	мВведенныйТекст = Текст;
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	параметры = Новый Структура;
	параметры.Вставить("СоздаватьНовый", СоздаватьНовый);
	
	статусыИсключения = Новый Массив;
	
	Если НЕ пПараметры = Неопределено И пПараметры.Свойство("БезЗавершенныхЗадач") И пПараметры.БезЗавершенныхЗадач Тогда
		статусыИсключения.Добавить(Перечисления.Статус.Закрыт);
		статусыИсключения.Добавить(Перечисления.Статус.Решен);
	КонецЕсли;
	параметры.Вставить("СписокСтатусовИсключений", статусыИсключения);
	
	ДанныеВыбора = НайтиВДелах(Текст, ПодобранныеЗначения, параметры);
	Если ПодобранныеЗначения[Текст] = Неопределено Тогда
		ДанныеВыбора.Вставить(0, "СоздатьНовый", "Создать новый...");
	КонецЕсли;
КонецПроцедуры // Подбор()

Функция Проект(пДело) Экспорт 
	Возврат пДело.ГруппаДел;
КонецФункции // Проект()

Функция ОбновитьГруппуДел(пДело, пПроект) Экспорт 
	Если ЗначениеЗаполнено(пПроект) И НЕ (пДело.ГруппаДел = пПроект) Тогда
		объектДело = пДело.ПолучитьОбъект();
		объектДело.ГруппаДел = пПроект;
		объектДело.Записать();
	КонецЕсли;
КонецФункции // ОбновитьГруппуДел()

/////////////////////////////////////////////////////////////////
// РЕГИСТР СВЕДЕНИЙ

Функция ОбновитьЗначенияВРегистре(пИмяРегистра, пКлючи, пПараметры, предЗначение = Неопределено, СоздаватьНовую = Истина) Экспорт 
	наборЗаписей = РегистрыСведений[пИмяРегистра].СоздатьНаборЗаписей();
	Для каждого лКлюч Из пКлючи Цикл
		наборЗаписей.Отбор[лКлюч.Ключ].Установить(лКлюч.Значение);
	КонецЦикла;
	наборЗаписей.Прочитать();
	
	Если наборЗаписей.Количество() = 0 И СоздаватьНовую Тогда
		новаяЗапись = наборЗаписей.Добавить();
	ИначеЕсли наборЗаписей.Количество() > 0 Тогда
		новаяЗапись = наборЗаписей[0];
		
		предЗначение = Новый Структура;
		Для каждого пПараметр Из пПараметры Цикл
			предЗначение.Вставить(пПараметр.Ключ, новаяЗапись[пПараметр.Ключ]);
		КонецЦикла;
	КонецЕсли;
	
	Если новаяЗапись = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(новаяЗапись, пКлючи);
	ЗаполнитьЗначенияСвойств(новаяЗапись, пПараметры);
	
	наборЗаписей.Записать();
	
	Возврат Истина;
КонецФункции // ОбновитьЗначенияВРегистре()

Функция ОбновитьЗначениеВРегистре(пИмяРегистра, пИмяКлюча, пКлюч, пИмяПараметра, пПараметр, предЗначение = Неопределено, СоздаватьНовую = Истина) Экспорт 
	
	структураПредЗначение = Новый Структура;
	результат = ОбновитьЗначенияВРегистре(пИмяРегистра, Новый Структура(пИмяКлюча, пКлюч), Новый Структура(пИмяПараметра, пПараметр), структураПредЗначение, СоздаватьНовую);
	
	Если структураПредЗначение.Свойство(пИмяПараметра) Тогда
		предЗначение = структураПредЗначение[пИмяПараметра];
	КонецЕсли;
	
	Возврат результат;
КонецФункции // ОбновитьЗначениеВРегистре()