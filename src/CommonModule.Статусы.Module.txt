
&НаСервере
Функция ИзменитьСтатус(пДело, пСтатус, пМантис = Ложь) Экспорт 
	пМантис = Ложь;
	
	Если ТипЗнч(пСтатус) = тип("Строка") Тогда
		текСтатус = Перечисления.Статус[пСтатус];
	Иначе
		текСтатус = пСтатус;
	КонецЕсли;
	
	//itl.ermakov [25.05.2012] {{
	Если (текСтатус = Перечисления.Статус.Решен ИЛИ текСтатус = Перечисления.Статус.Закрыт) 
		И ПолучитьЗначениеРеквизита(пДело, "флРешатьТолькоПослеВыполненияЧекЛиста") Тогда
		Если НЕ ЧекЛистыСервер.ВсеПунктыЧекЛистаЗакрыты(пДело) Тогда
			ТекстСообщения = НСтр("ru = 'Задачу ""$Задача"" можно решить только закрыв все пункты чек-листа.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "$Задача", Строка(пДело)); 
			Сообщить(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	//}}itl.ermakov [25.05.2012]
	
	предСтатус = Неопределено;
	Если ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(пДело, текСтатус, "Статус", предСтатус, Ложь) Тогда
		новаяЗапись = РегистрыСведений.ИсторияИзменений.СоздатьМенеджерЗаписи();
	
		новаяЗапись.Период = ТекущаяДата();
		новаяЗапись.Дело = пДело;
		новаяЗапись.Сотрудник = ПараметрыСеанса.ТекущийСотрудник;
		новаяЗапись.ОписаниеИзменения = "Статус задачи изменен на " + пСтатус;

		новаяЗапись.Записать();
		
		Если предСтатус = Перечисления.Статус.Уточняется
			И НЕ текСтатус = Перечисления.Статус.Уточняется
			И НЕ текСтатус = Перечисления.Статус.Решен
			И НЕ текСтатус = Перечисления.Статус.Закрыт
			Тогда
			// если задача была в статусе уточняется, то имеет смысл поменять ей статус и 
			// отобразить ее в самом верху
			новыйСисПриоритет = 0;
		Иначе
			новыйСисПриоритет = НовыйСистемныйПриоритет(текСтатус);
		КонецЕсли;
		
		Если НЕ новыйСисПриоритет = Неопределено Тогда
			предЗначение = Неопределено;
			ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(пДело, новыйСисПриоритет, "СистемныйПриоритет", предЗначение);
			
			ДелатьПересчет = Истина;
			Если    (текСтатус = Перечисления.Статус.Новый 
				ИЛИ текСтатус = Перечисления.Статус.ДопИнформация)
				И ( предСтатус = Перечисления.Статус.Уточняется
				ИЛИ предСтатус = Перечисления.Статус.Решен
				ИЛИ предСтатус = Перечисления.Статус.Закрыт)
				Тогда
				ДелатьПересчет = Ложь;
			КонецЕсли;
			
			Если ДелатьПересчет Тогда
				ПереписатьСледующиеПриоритеты(пДело, новыйСисПриоритет, предЗначение);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ пМантис Тогда
			параметры = Новый Структура();
			параметры.Вставить("Дело", пДело);
			параметры.Вставить("предСтатус", предСтатус);
			параметры.Вставить("новСтатус", текСтатус);
			параметры.Вставить("Автор", ПараметрыСеанса.ТекущийСотрудник);
			
			//Мантис.ИзменитьСтатус(параметры);
		КонецЕсли;
	КонецЕсли;
КонецФункции // ИзменитьСтатус()

&НаСервере
Функция НовыйСистемныйПриоритет(пСтатус) Экспорт 
	Если    пСтатус = Перечисления.Статус.Новый 
		ИЛИ пСтатус = Перечисления.Статус.ДопИнформация Тогда
		Возврат 0;
	ИначеЕсли пСтатус = Перечисления.Статус.Уточняется Тогда
		Возврат 77777777;
	ИначеЕсли пСтатус = Перечисления.Статус.Решен Тогда
		Возврат 88888888;
	ИначеЕсли пСтатус = Перечисления.Статус.Закрыт Тогда
		Возврат 999999999;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // НовыйСистемныйПриоритет()

&НаСервере
Функция ПереписатьСледующиеПриоритеты(текДело, пПорядок, предЗначение, РазмерДвижения = 1) Экспорт 
	новыйПорядок = Новый Соответствие;
	
	Если пПорядок = предЗначение Тогда
		Возврат Истина;
	ИначеЕсли пПорядок = 0 Тогда
		// приоритет задачи сделали в 0 (номер в очереди стал меньше)
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЗадачиКВыполнению.Дело,
		|	ЗадачиКВыполнению.СистемныйПриоритет
		|ИЗ
		|	РегистрСведений.ЗадачиКВыполнению КАК ЗадачиКВыполнению
		|ГДЕ
		|	  ЗадачиКВыполнению.СистемныйПриоритет >= &СистемныйПриоритет
		|	И НЕ ЗадачиКВыполнению.Статус = Значение(Перечисление.Статус.Закрыт)
		|	И НЕ ЗадачиКВыполнению.Статус = Значение(Перечисление.Статус.Решен)
		|	И НЕ ЗадачиКВыполнению.Статус = Значение(Перечисление.Статус.Уточняется)
		|";
		
		Запрос.УстановитьПараметр("СистемныйПриоритет", предЗначение);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если НЕ текДело = Выборка.Дело Тогда
				новыйПорядок.Вставить(Выборка.Дело, Выборка.СистемныйПриоритет - РазмерДвижения);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли предЗначение = 0 Тогда
		// приоритет задачи повысили (номер в очереди стал меньше)
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЗадачиКВыполнению.Дело,
		|	ЗадачиКВыполнению.СистемныйПриоритет
		|ИЗ
		|	РегистрСведений.ЗадачиКВыполнению КАК ЗадачиКВыполнению
		|ГДЕ
		|	  ЗадачиКВыполнению.СистемныйПриоритет >= &СистемныйПриоритет
		|	И НЕ ЗадачиКВыполнению.Статус = Значение(Перечисление.Статус.Закрыт)
		|	И НЕ ЗадачиКВыполнению.Статус = Значение(Перечисление.Статус.Решен)
		|	И НЕ ЗадачиКВыполнению.Статус = Значение(Перечисление.Статус.Уточняется)
		|";
		
		Запрос.УстановитьПараметр("СистемныйПриоритет", пПорядок);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если НЕ текДело = Выборка.Дело Тогда
				новыйПорядок.Вставить(Выборка.Дело, Выборка.СистемныйПриоритет + РазмерДвижения);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли пПорядок < предЗначение Тогда
		// приоритет задачи понизили (номер в очереди стал больше)
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЗадачиКВыполнению.Дело,
		|	ЗадачиКВыполнению.СистемныйПриоритет
		|ИЗ
		|	РегистрСведений.ЗадачиКВыполнению КАК ЗадачиКВыполнению
		|ГДЕ
		|	  ЗадачиКВыполнению.СистемныйПриоритет >= &СистемныйПриоритет
		|	И ЗадачиКВыполнению.СистемныйПриоритет < &ПредСистемныйПриоритет
		|	И НЕ ЗадачиКВыполнению.Статус = Значение(Перечисление.Статус.Закрыт)
		|	И НЕ ЗадачиКВыполнению.Статус = Значение(Перечисление.Статус.Решен)
		|	И НЕ ЗадачиКВыполнению.Статус = Значение(Перечисление.Статус.Уточняется)
		|";
		
		Запрос.УстановитьПараметр("СистемныйПриоритет", пПорядок);
		Запрос.УстановитьПараметр("ПредСистемныйПриоритет", предЗначение);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если НЕ текДело = Выборка.Дело Тогда
				новыйПорядок.Вставить(Выборка.Дело, Выборка.СистемныйПриоритет + 1);
			КонецЕсли;
		КонецЦикла;
	Иначе
		// приоритет задачи понизили (номер в очереди стал больше)
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЗадачиКВыполнению.Дело,
		|	ЗадачиКВыполнению.СистемныйПриоритет
		|ИЗ
		|	РегистрСведений.ЗадачиКВыполнению КАК ЗадачиКВыполнению
		|ГДЕ
		|	  ЗадачиКВыполнению.СистемныйПриоритет > &ПредСистемныйПриоритет
		|	И ЗадачиКВыполнению.СистемныйПриоритет <= &СистемныйПриоритет
		|	И НЕ ЗадачиКВыполнению.Статус = Значение(Перечисление.Статус.Закрыт)
		|	И НЕ ЗадачиКВыполнению.Статус = Значение(Перечисление.Статус.Решен)
		|	И НЕ ЗадачиКВыполнению.Статус = Значение(Перечисление.Статус.Уточняется)
		|";
		
		Запрос.УстановитьПараметр("СистемныйПриоритет", пПорядок);
		Запрос.УстановитьПараметр("ПредСистемныйПриоритет", предЗначение);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если НЕ текДело = Выборка.Дело Тогда
				новыйПорядок.Вставить(Выборка.Дело, Выборка.СистемныйПриоритет - 1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если новыйПорядок.Количество() > 0 Тогда
		наборЗаписей = РегистрыСведений.ЗадачиКВыполнению.СоздатьНаборЗаписей();
		наборЗаписей.Прочитать();
	
		Для каждого записьРегистра Из наборЗаписей Цикл
			Если записьРегистра.Статус = Перечисления.Статус.Закрыт
				ИЛИ записьРегистра.Статус = Перечисления.Статус.Решен Тогда
				Продолжить;
			КонецЕсли;
			новоеЗнач = новыйПорядок[записьРегистра.Дело];
			Если НЕ новоеЗнач = Неопределено Тогда
				записьРегистра.СистемныйПриоритет = новоеЗнач;
			КонецЕсли;
		КонецЦикла;
	
	 	наборЗаписей.Записать();
	КонецЕсли;
КонецФункции // ПереписатьСледующиеПриоритеты()

//////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////  НУЖНО СОЗДАТЬ МОДУЛЬ ОБЩЕГОНАЗНАЧЕНИЯ И ПЕРЕНСТИ В НЕГО

Функция ПолучитьЗначенияРеквизитов(Ссылка, ИменаРеквизитов) Экспорт

	Если ТипЗнч(ИменаРеквизитов) = Тип("Структура") Тогда
		СтруктураРеквизитов = ИменаРеквизитов;
	ИначеЕсли ТипЗнч(ИменаРеквизитов) = Тип("Строка") Тогда
		СтруктураРеквизитов = Новый Структура(ИменаРеквизитов);;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный тип второго параметра ИменаИлиСтруктураРеквизитов: %1'"), 
			Строка(ТипЗнч(ИменаРеквизитов)));
	КонецЕсли;

	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Ключ));
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
			|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|" + ТекстПолей + "
		|ИЗ
		|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);

	Возврат Результат;
КонецФункции

Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ПолучитьЗначенияРеквизитов(Ссылка, ИмяРеквизита);
	Возврат Результат[ИмяРеквизита];
	
КонецФункции
