

&НаКлиенте
Процедура Сформировать(Команда)
	Результат = СформироватьСервер();
	
	Результат.ФиксацияСлева = 2;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПолейОтбора()
	Элементы.ЗначениеОтбораПоФакту.Видимость=ОтборПоФакту;
	Элементы.ЗначениеОтбораПоПогрешности.Видимость=ОтборПоПогрешности;
КонецПроцедуры

&НаКлиенте 
Процедура ОтборПоФактуПриИзменении(Элемент)
	УстановитьВидимостьПолейОтбора();
КонецПРоцедуры
&НаКлиенте 
Процедура ОтборПоПогрешностиПриИзменении(Элемент)
	УстановитьВидимостьПолейОтбора();
КонецПРоцедуры

&НаСервере
Функция СформироватьСервер()
	ДеревоРезультата = ЗаполнитьДеревоРезультата();
	
	// там где задача, там у нас показатели
	// поэтому можно пройти по иерархии и получить максимальное количество колонок
	
	лПараметрыОтчета = Новый Структура;
	лПараметрыОтчета.Вставить("МаксЧислоОценок", 0);
	ДеревоРезультата.Колонки.Добавить("Уровень");
	ДеревоРезультата.Колонки.Добавить("Видимость", новый ОписаниеТипов("Булево"));
	
	ПройтиВглубьДерева(ДеревоРезультата, лПараметрыОтчета, 0);
	ПланВглубьДерева(ДеревоРезультата);
	Если Не ОтборПоФакту и Не ОтборПОПогрешности тогда
		УстановитьВидимостьВглубьДерева(ДеревоРезультата,Истина);
	конецЕсли;
	
	Если ОтборПоФакту и   ЗначениеОтбораПоФакту>0 тогда
		ВидимостьВглубьДерева(ДеревоРезультата,"Потрачено",ЗначениеОтбораПоФакту);
	КонецЕсли;
	
	Если ОтборПоПогрешности тогда
		ВидимостьВглубьДерева(ДеревоРезультата,"Погрешность",ЗначениеОтбораПоПогрешности);
	КонецЕсли;

	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ВывестиРезультат(ДеревоРезультата, ТабличныйДокумент, лПараметрыОтчета);
	
	МаксЧислоОценок = лПараметрыОтчета.МаксЧислоОценок;
	номерТекКолонки = 4;
	Для сч = 1 ПО МаксЧислоОценок Цикл
		колвоПодколонок = 4;
		
		ОбластьВерсии = ТабличныйДокумент.Область(, номерТекКолонки + 1, 3, номерТекКолонки + 1); ОбластьВерсии.ШиринаКолонки = 6;
		ОбластьВерсии = ТабличныйДокумент.Область(, номерТекКолонки + 2, 3, номерТекКолонки + 2); ОбластьВерсии.ШиринаКолонки = 6;
		ОбластьВерсии = ТабличныйДокумент.Область(, номерТекКолонки + 3, 3, номерТекКолонки + 3); ОбластьВерсии.ШиринаКолонки = 6;
		
		номерТекКолонки = номерТекКолонки + колвоПодколонок;
	КонецЦикла;
	
	ОбластьВерсии = ТабличныйДокумент.Область(, 3, 3, 3); ОбластьВерсии.ШиринаКолонки = 6;
	
	Возврат ТабличныйДокумент;
КонецФункции // СформироватьСервер()

&НаСервере
Функция ПройтиВглубьДерева(ДеревоРезультата, лПараметрыОтчета, Уровень)
	Для каждого текСтрока Из ДеревоРезультата.Строки Цикл
		текСтрока.Уровень = Уровень;
		
		Если ЗначениеЗаполнено(текСтрока.Задача) Тогда
			текМаксЧисло = текСтрока.Строки.Количество();
			
			лПараметрыОтчета.МаксЧислоОценок = Макс(лПараметрыОтчета.МаксЧислоОценок, текМаксЧисло);
		Иначе
			ПройтиВглубьДерева(текСтрока, лПараметрыОтчета, Уровень + 1);
		КонецЕсли;
	КонецЦикла;
КонецФункции // ПройтиВглубьДерева()

&НаСервере
Функция ПланВглубьДерева(ДеревоРезультата)
	Для каждого текСтрока Из ДеревоРезультата.Строки Цикл	
		Если Не текСтрока.Уровень=NULL Тогда
			Если (Не текСтрока.Статус = Null) И ЗначениеЗаполнено(текСтрока.ПланТрудозатрат) и текСтрока.ПланТрудозатрат>0 и (текСтрока.Родитель.Строки[0].ПланТрудозатрат=NULL или текСтрока.Родитель.Строки[0].ПланТрудозатрат=0) Тогда
				текСтрока.Родитель.Строки[0].ПланТрудозатрат = текСтрока.ПланТрудозатрат;
				Если Не  текСтрока.Родитель.Строки[0].Потрачено=Null тогда
				 	текСтрока.Родитель.Строки[0].погрешность=Окр(((текСтрока.Родитель.Строки[0].Потрачено -  текСтрока.Родитель.Строки[0].ПланТрудозатрат) /  текСтрока.Родитель.Строки[0].ПланТрудозатрат * 100),2);
				КонецЕсли;
			Иначе
				ПланВглубьДерева(текСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецФункции
&НаСервере
Функция ВидимостьВглубьДерева(ДеревоРезультата,Параметр,Значение)
	Для каждого текСтрока Из ДеревоРезультата.Строки Цикл	
		Если Не текСтрока.Строки[0].Уровень=NULL Тогда
			Если ( текСтрока.Статус = Null) И (Не текСтрока.Задача=NULL) Тогда
				Если ЗначениеЗаполнено(текСтрока.Строки[0][Параметр]) тогда
					Если текСтрока.Строки[0][Параметр]>Значение тогда
						текСтрока.Видимость=Истина;
						УстановитьВидимостьВверхПоДереву(текСтрока.Родитель,Истина);
					КонецЕсли;
				конецЕсли;
			Иначе
				ВидимостьВглубьДерева(текСтрока,Параметр,Значение);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
КонецФункции
&НаСервере
Функция УстановитьВидимостьВглубьДерева(ДеревоРезультата,текВидимость)
	Для каждого текСтрока Из ДеревоРезультата.Строки Цикл
		текСтрока.Видимость=текВидимость;
		Если Не текСтрока.Уровень=NULL Тогда
			УстановитьВидимостьВглубьДерева(текСтрока,текВидимость);
		КонецЕсли;
	КонецЦикла;
КонецФункции
&НаСервере
Функция УстановитьВидимостьВверхПоДереву(текСтрока,текВидимость)
		Если ЗначениеЗаполнено(текСтрока.Родитель) Тогда
			текСтрока.Видимость=текВидимость;
			УстановитьВидимостьВверхПоДереву(текСтрока.Родитель,текВидимость);
		КонецЕсли;
КонецФункции

&НаСервере
Функция ЗаполнитьДеревоРезультата()
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Потрачено.Дело КАК Задача,
	|	СУММА(РАЗНОСТЬДАТ(Потрачено.Старт, Потрачено.Завершение, МИНУТА) / 60) КАК Потрачено,
	|	Потрачено.Завершение КАК Завершение
	|Поместить Факт
	|ИЗ
	|	РегистрСведений.Дела КАК Потрачено
	|СГРУППИРОВАТЬ ПО
	|	Потрачено.Дело,
	|	Потрачено.Завершение
	|;
	|ВЫБРАТЬ
	|	План.Дело.ГруппаДел КАК Проект,
	|	План.Дело КАК Задача,
	|	Максимум(План.Период) КАК Период,
	|	План.ПланТрудозатрат
	|Поместить предПлан
	|ИЗ
	|	РегистрСведений.ДатыЗадач КАК План
	|ГДЕ
	|	План.Период >= &Начало
	|"+?(ЗначениеЗаполнено(ДатаЗавершения), "И План.Период <= &Конец", "")+"
	|Сгруппировать ПО
	|	План.Дело.ГруппаДел,
	|	План.Дело,
	|	План.ПланТрудозатрат
	|;
	|ВЫБРАТЬ
	|	План.Проект,
	|	План.Задача,
	|	&текПериод КАК Период,
	|	NULL КАК ПланТрудозатрат
	|Поместить План
	|ИЗ
	|	предПлан КАК План
	|Сгруппировать ПО
	|	План.Проект,
	|	План.Задача
    |
	|ОБЪЕДИНИТЬ ВСЕ
    |
	|ВЫБРАТЬ
	|	План.Проект,
	|	План.Задача,
	|	Период,
	|	ПланТрудозатрат
	|ИЗ
	|	предПлан КАК План
	|;
	|ВЫБРАТЬ
	|	План.Проект,
	|	План.Задача,
	|	Свойства.Статус,
	|	МАКСИМУМ(План.Период) КАК Период,
	|	СУММА(Факт.Потрачено) КАК Потрачено,
	|	План.ПланТрудозатрат
	|Поместить ТаблРезультат
	|ИЗ
	|	План КАК План
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Факт КАК Факт
	|ПО
	|	План.Задача = Факт.Задача
	|	И План.Период >= Факт.Завершение
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЗадачиКВыполнению КАК Свойства
	|ПО
	|	План.Задача = Свойства.Дело
	|СГРУППИРОВАТЬ ПО
	|	План.Проект,
	|	План.Задача,
	|	Свойства.Статус,
	|	План.ПланТрудозатрат
	|;
	|ВЫБРАТЬ
	|	ТаблРезультат.Проект,
	|	ТаблРезультат.Задача,
	|	ТаблРезультат.Статус,
	|	ТаблРезультат.Период,
	|	Выразить(ТаблРезультат.Потрачено КАК ЧИСЛО(15,2)) КАК Потрачено,
	|	ТаблРезультат.ПланТрудозатрат,
	|	
	|	выбор 	когда ЕстьNULL(ТаблРезультат.ПланТрудозатрат, 0) = 0
	|			тогда 0
	|			иначе Выразить(((ТаблРезультат.Потрачено - ТаблРезультат.ПланТрудозатрат) / ТаблРезультат.ПланТрудозатрат * 100) КАК  ЧИСЛО(15,2))
	|	конец как погрешность
	|ИЗ
	|	ТаблРезультат
	|ИТОГИ
	|	МАКСИМУМ(ПланТрудозатрат),
	|	МАКСИМУМ(Потрачено),
	|	МиниМУМ(Погрешность)
	|ПО
	|	Проект ИЕРАРХИЯ,
	|	Задача
	|";
	
	Запрос.УстановитьПараметр("Начало", ДатаНачала);
	Запрос.УстановитьПараметр("Конец", ДатаЗавершения);
	Запрос.УстановитьПараметр("текПериод", ТекущаяДата());
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
КонецФункции // ЗаполнитьДеревоРезультата()

&НаСервере
Процедура ВывестиРезультат(ДеревоРезультата, пТабличныйДокумент, лПараметрыОтчета)
	пТабличныйДокумент.Очистить();
	
	//шаблонВывода = Отчеты.ОтчетПоОценке.ПолучитьМакет("ЛегендаВывода");
	шаблонВывода = РеквизитФормыВЗначение("Отчет").ПолучитьМакет("ЛегендаВывода");
	ВывестиШапку(шаблонВывода, пТабличныйДокумент, лПараметрыОтчета);	
	
	ВывестиРазделитель(шаблонВывода, пТабличныйДокумент);
	
	пТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	Для каждого строкиРезультата Из ДеревоРезультата.Строки Цикл
		ВывестиСтрокуРезультата(строкиРезультата, шаблонВывода, пТабличныйДокумент);
	КонецЦикла;
	пТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
КонецПроцедуры // ВывестиРезультат()

&НаСервере
Процедура ВывестиШапку(пШаблонВывода, пТабличныйДокумент, лПараметрыОтчета)
	пОбласть = пШаблонВывода.ПолучитьОбласть("Шапка|РазделительВерт");
	пТабличныйДокумент.Вывести(пОбласть);
	пОбласть = пШаблонВывода.ПолучитьОбласть("Шапка|Показатель");
	пТабличныйДокумент.Присоединить(пОбласть);
	пОбласть = пШаблонВывода.ПолучитьОбласть("Шапка|Статус");
	пТабличныйДокумент.Присоединить(пОбласть);
	
	пОбласть = пШаблонВывода.ПолучитьОбласть("ШапкаПоказателей|Показатель");
	
	номерТекКолонки = 4;
	
	МаксЧислоОценок = лПараметрыОтчета.МаксЧислоОценок;
	
	Для сч = 1 ПО МаксЧислоОценок Цикл
		колвоПодколонок = 4;
		
		// Присоединяем колонки (период, оценка, потрачено, погрешность)
		ВывестиКолонку(пТабличныйДокумент, пОбласть, "Период");
		ВывестиКолонку(пТабличныйДокумент, пОбласть, "План");
		ВывестиКолонку(пТабличныйДокумент, пОбласть, "Факт");
		ВывестиКолонку(пТабличныйДокумент, пОбласть, "Погрешность");
		
		// Объединим несколько показателей и напишем там версию
		ОбластьВерсии = пТабличныйДокумент.Область(1, номерТекКолонки, 1, номерТекКолонки + колвоПодколонок - 1);
		ОбластьВерсии.Объединить();
		ОбластьВерсии.Текст = "Оценка " + сч;
		
		номерТекКолонки = номерТекКолонки + колвоПодколонок;
	КонецЦикла;
КонецПроцедуры // ВывестиШапку()

&НаСервере
Процедура ВывестиКолонку(пТабличныйДокумент, пОбласть, лИмяПоказателя)
	пОбласть.Параметры.показатель = лИмяПоказателя;
	пТабличныйДокумент.Присоединить(пОбласть);
КонецПроцедуры // ВывестиКолонку()

&НаСервере
Процедура ВывестиСтрокуРезультата(пРодительСтрока, пШаблонВывода, пТабличныйДокумент)
	//// если уже в первой строке заполнена версия, значит надо выводить группировку и никакой иерархии уже нет
	//Если НЕ пРодительСтрока.Строки[0].Статус = Null Тогда
	//	имяУровня = ВывестиГруппировку(пРодительСтрока, пШаблонВывода, пТабличныйДокумент);
	//	ВывестиПоказателиВправо(пРодительСтрока, пШаблонВывода, пТабличныйДокумент, имяУровня);
	//	Возврат;
	//КонецЕсли;
	
	// Перебираем строки
	// 1. строка с такой же задаче является строкой содержащей результат
	// 		под ней уже будут строки с показателями
	// 2. строка
	Для каждого подстрокаРезультата Из пРодительСтрока.Строки Цикл
		Если ЗначениеЗаполнено(подстрокаРезультата.Уровень) и подстрокаРезультата.Видимость Тогда
			Если НЕ подстрокаРезультата.Строки[0].Статус = Null Тогда
				// Выводим показатели вправо
				имяУровня = ВывестиГруппировку(подстрокаРезультата, пШаблонВывода, пТабличныйДокумент);
				ВывестиПоказателиВправо(подстрокаРезультата, пШаблонВывода, пТабличныйДокумент, имяУровня);
			Иначе
				// Выводим иерархию вниз
				ВывестиГруппировку(подстрокаРезультата, пШаблонВывода, пТабличныйДокумент);
				ВывестиСтрокуРезультата(подстрокаРезультата, пШаблонВывода, пТабличныйДокумент);
			КонецЕсли;
		КОнецЕсли;
	КонецЦикла;
	
	ВывестиРазделитель(пШаблонВывода, пТабличныйДокумент, пРодительСтрока.Уровень);
КонецПроцедуры // ВывестиСтрокуРезультата()

&НаСервере
Процедура ВывестиРазделитель(пШаблонВывода, пТабличныйДокумент, пУровень = 0)
	областьВывода = пШаблонВывода.ПолучитьОбласть("Разделитель");
	Если пУровень = 0 Тогда
		пТабличныйДокумент.Вывести(областьВывода);
	Иначе
		пТабличныйДокумент.Вывести(областьВывода, пУровень);
	КонецЕсли;
	
КонецПроцедуры // ВывестиРазделитель()

&НаСервере
Функция ВывестиГруппировку(пСтрокаДерева, пШаблонВывода, пТабличныйДокумент)
	Если НЕ пСтрокаДерева.Строки[0].Статус = Null Тогда
		имяУровня = "Уровень0";
		ЗначениеГруппировки = пСтрокаДерева.Задача;
	Иначе
		имяУровня = "Уровень1";
		ЗначениеГруппировки = пСтрокаДерева.Проект;
	КонецЕсли;
	областьВывода = пШаблонВывода.ПолучитьОбласть(имяУровня + "|РазделительВерт");
	пТабличныйДокумент.Вывести(областьВывода, пСтрокаДерева.Уровень);
	
	областьВывода = пШаблонВывода.ПолучитьОбласть(имяУровня + "|Показатель");
	
	областьВывода.Параметры.НекоеЗначение = ЗначениеГруппировки;
	пТабличныйДокумент.Присоединить(областьВывода);
	
	Если имяУровня = "Уровень0" Тогда
		// выведем еще статус
		областьВывода.Параметры.НекоеЗначение = пСтрокаДерева.Строки[0].Статус;
		пТабличныйДокумент.Присоединить(областьВывода);
	КонецЕсли;
	
	Возврат имяУровня;
КонецФункции // ВывестиГруппировку()

&НаСервере
Процедура ВывестиПоказателиВправо(пСтрокаДерева, пШаблонВывода, пТабличныйДокумент, пИмяУровня = "Уровень0")
	областьВывода = пШаблонВывода.ПолучитьОбласть(пИмяУровня + "|Показатель");
	
	СписокПоказателей = Новый Массив;
	СписокПоказателей.Добавить("Период");
	СписокПоказателей.Добавить("ПланТрудозатрат");
	СписокПоказателей.Добавить("Потрачено");
	СписокПоказателей.Добавить("погрешность");
	
	Для каждого лТекСтрока Из пСтрокаДерева.Строки Цикл
		Для каждого лПоказатель Из СписокПоказателей Цикл
			областьВывода.Параметры.НекоеЗначение = лТекСтрока[лПоказатель];
			пТабличныйДокумент.Присоединить(областьВывода);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры // ВывестиПоказателиВправо()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьПолейОтбора();
КонецПроцедуры


