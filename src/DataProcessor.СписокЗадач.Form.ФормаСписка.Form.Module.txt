
&НаКлиенте
Перем мВведенныйТекст;

&НаКлиенте
Перем ПодобранныеЗначения;

&НаКлиенте
Перем фЗаблокироватьВызовСервера;

&НаКлиенте
Перем фПроверкаТекущаяСтрока;

&НаКлиенте
Перем фПроектыМантиса;

&НаКлиенте
Перем фтекПроектМантиса;

/////////////////////////////////////////////////////////////////////

&НаСервере
Функция ЭтоГлавнаяРоль()
	Если ПараметрыСеанса.РольСотрудника = Перечисления.РолиСотрудников.ПолныеПрава Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции // ЭтоГлавнаяРоль()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	фЗаблокироватьВызовСервера = Ложь;
	
	фНовый = Истина;
	фДопИнформация = Истина;
	фНазначен = Истина;
	фВРаботе = Истина;
	фКВыполнению = Истина;
	
	УстановитьОтборПоСтатусу();
	
	ОбновитьЗадачи();
	
	Элементы.ГруппаОтборСтатусов.Видимость = ЕстьОтборСтатусов;
	Элементы.ИсторияСобытий.Видимость = ЕстьКомментарии;
	
	ПодключитьОбработчикОжидания("клОбновитьОписание", 15);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтборСтатусов(Команда)
	ЕстьОтборСтатусов = НЕ ЕстьОтборСтатусов;
	Элементы.ГруппаОтборСтатусов.Видимость = ЕстьОтборСтатусов;
	//итлПопов {{09.12.2012#
	//
	Элементы.ПоказатьОтборСтатусов.Пометка = ЕстьОтборСтатусов;
	//}}Попов
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКомментарии(Команда)
	ЕстьКомментарии = НЕ ЕстьКомментарии;
	Элементы.ИсторияСобытий.Видимость = ЕстьКомментарии;
	//итлПопов {{09.12.2012#
	//
	Элементы.ПоказатьКомментарии.Пометка = ЕстьКомментарии;
	//}}Попов
КонецПроцедуры

&НаСервере
Функция ПечатьСервер()
	вывод = Новый ТабличныйДокумент;
	
	макет = Обработки.СписокЗадач.ПолучитьМакет("Задачи");
	шапка = макет.ПолучитьОбласть("Шапка");
	вывод.Вывести(шапка);
	
	масЗадач = Новый Массив;
	Для каждого ид Из Элементы.СписокЗадач.ВыделенныеСтроки Цикл
		масЗадач.Добавить(ид.Дело);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗадачиКВыполнению.Дело.Наименование КАК Дело,
	|	ЗадачиКВыполнению.Дело.ГруппаДел КАК Проект,
	|	ЗадачиКВыполнению.Дело.ТекстРасширенноеОписание КАК ТекстРасширенноеОписание,
	|	ЗадачиКВыполнению.Статус,
	|	ЗадачиКВыполнению.Исполнитель,
	|	ДатыЗадач.ПланТрудозатрат КАК Оценка,
	|	ДатыЗадач.ПлановаяДата КАК Срок,
	|	ГолосаДел.КоличествоГолосов,
	|	Факт.Потрачено,
	|	ДатыЗадач.ПланТрудозатрат - ЕстьNULL(Факт.Потрачено, 0) КАК Осталось,
	|	ТвердыеДатыЗадач.Трудозатраты КАК ПерваяОценка,
	|	ТвердыеДатыЗадач.КрайнийСрок КАК КрайнийСрок
	|ИЗ
	|	РегистрСведений.ЗадачиКВыполнению КАК ЗадачиКВыполнению
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ДатыЗадач.СрезПоследних КАК ДатыЗадач
	|ПО
	|	ЗадачиКВыполнению.Дело = ДатыЗадач.Дело
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		ЖесткиеДатыЗадач.Дело,
	|		МАКСИМУМ(ЖесткиеДатыЗадач.Трудозатраты) КАК Трудозатраты,
	|		МАКСИМУМ(ЖесткиеДатыЗадач.КрайнийСрок) КАК КрайнийСрок
	|	ИЗ
	|		РегистрСведений.ЖесткиеДатыЗадач КАК ЖесткиеДатыЗадач
	|	СГРУППИРОВАТЬ ПО
	|		ЖесткиеДатыЗадач.Дело
	|	) КАК ТвердыеДатыЗадач
	|ПО
	|	ЗадачиКВыполнению.Дело = ТвердыеДатыЗадач.Дело
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		ГолосаДел.Дело,
	|		СРЕДНЕЕ(ГолосаДел.СистемныйПриоритет) КАК КоличествоГолосов
	|	ИЗ
	|		РегистрСведений.ГолосаДел КАК ГолосаДел
	|	СГРУППИРОВАТЬ ПО
	|		ГолосаДел.Дело
	|	) КАК ГолосаДел
	|ПО
	|	ЗадачиКВыполнению.Дело = ГолосаДел.Дело
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		Факт.Дело,
	|		СУММА(РАЗНОСТЬДАТ(Факт.Старт, Факт.Завершение, МИНУТА) / 60) КАК Потрачено
	|	ИЗ
	|		РегистрСведений.Дела КАК Факт
	|	СГРУППИРОВАТЬ ПО
	|		Факт.Дело
	|	) КАК Факт
	|ПО
	|	ЗадачиКВыполнению.Дело = Факт.Дело
	|ГДЕ
	|	ЗадачиКВыполнению.Дело В (&СписокЗадач)
	|";
	
	Запрос.УстановитьПараметр("СписокЗадач", масЗадач);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		строка = макет.ПолучитьОбласть("Строка");
		строка.Параметры.Наименование 	= Выборка.Дело;
		строка.Параметры.Проект 		= Выборка.Проект;
		строка.Параметры.Статус 		= Выборка.Статус;
		строка.Параметры.Исполнитель 	= Выборка.Исполнитель;
		строка.Параметры.Оценка 		= Выборка.Оценка;
		строка.Параметры.Срок 			= Выборка.Срок;
		вывод.Вывести(строка);
		
		описание = макет.ПолучитьОбласть("ОписаниеЗадачи");
		описание.Параметры.Описание 	= Выборка.ТекстРасширенноеОписание;
		вывод.Вывести(описание);
	КонецЦикла;
	
	Возврат вывод;
КонецФункции // ПечатьСервер()

&НаКлиенте
Процедура Печать(Команда)
	табДокумент = ПечатьСервер();
	
	табДокумент.Показать("Задачи");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗадачи()
	Элементы.СписокЗадач.Обновить();
КонецПроцедуры // ОбновитьЗадачи()

&НаКлиенте
Функция ПолучитьТекущуюСтроку()
	Если Элементы.СписокЗадач.ТекущаяСтрока = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Элементы.СписокЗадач.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	текСтрока = Элементы.СписокЗадач.ТекущиеДанные;
	
	Возврат текСтрока;
КонецФункции // ПолучитьТекущуюСтроку()

////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// список разработчиков попробуем получить
	лСписокРазработчиков = Новый Массив;
	Если ПараметрыСеанса.РольСотрудника = Перечисления.РолиСотрудников.ПолныеПрава
		ИЛИ ПараметрыСеанса.РольСотрудника = Перечисления.РолиСотрудников.ОпытныйРазработчик Тогда
		лСписокРазработчиков = Пользователи.ПолучитьСписокРазработчиков();
	ИначеЕсли ПараметрыСеанса.РольСотрудника = Перечисления.РолиСотрудников.Разработчик Тогда
		лСписокРазработчиков.Добавить(ПараметрыСеанса.ТекущийСотрудник);
	КонецЕсли;
	
	ид = -1;
	Для каждого текРазработчик Из лСписокРазработчиков Цикл
		ид = ид + 1;
		
		имяКоманды = "_" + ид;
		текКоманда = Команды.Добавить(имяКоманды);
		текКоманда.Действие = "ДействиеРазработчик";
		текКоманда.Заголовок = текРазработчик;
		
		текКнопка = Элементы.Добавить(имяКоманды, Тип("КнопкаФормы"), Элементы.Разработчики);
		текКнопка.ИмяКоманды = имяКоманды;
		
		СписокРазработчиков.Добавить(текРазработчик);
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОткрытьЗадачу(Команда)
	текДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	п = Новый Структура("Ключ", текДанные.Дело);
	ОткрытьФорму("Справочник.Дело.ФормаОбъекта", п);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачуКлиент(Команда)
	СоздатьЗадачу(Неопределено);
КонецПроцедуры

&НаСервере
Процедура СоздатьЗадачу(Команда)
	текПозиция = Элементы.ГруппаДобавления.Видимость;
	
	Элементы.ГруппаДобавления.Видимость = НЕ текПозиция;
	//итлПопов {{09.12.2012#
	//
	Элементы.ПорученияДобавить.Пометка = НЕ текПозиция;
	//}}Попов
	Если Элементы.ГруппаДобавления.Видимость Тогда
		ТекущийЭлемент = Элементы.ЗадачаНаименование;
	КонецЕсли;
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТО ПОДБОРА И ВВОДА НОВОЙ СТРОКИ

&НаКлиенте
Процедура ЗадачаНаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	МодульДел.Подбор(Текст, ДанныеВыбора, СтандартнаяОбработка, мВведенныйТекст, ПодобранныеЗначения, , );
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	МодульДел.ОбработкаВыбора(ВыбранноеЗначение, СтандартнаяОбработка, мВведенныйТекст);
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНаименованиеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	подобранноеЗначение = ПодобранныеЗначения[Текст];
	Если НЕ подобранноеЗначение = Неопределено Тогда
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(подобранноеЗначение);
	Иначе
		МодульДел.Подбор(Текст, ДанныеВыбора, СтандартнаяОбработка, мВведенныйТекст, ПодобранныеЗначения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНаименованиеПриИзменении(Элемент)
	значенияНовойСтроки = ПолучитьЗначенияПоУмолчаниюНовойСтроки();
	значенияНовойСтроки.Вставить("Дело", НоваяЗадача);
	
	Если значенияНовойСтроки.Проект.Пустая() Тогда
		формаВыбора = ПолучитьФорму("Справочник.ГруппаДел.ФормаВыбора", , ЭтаФорма);
		лПроект = формаВыбора.ОткрытьМодально()
	КонецЕсли;
	значенияНовойСтроки.Вставить("Проект", лПроект);
	
	СохранитьНовуюСтрокуВРегистры(значенияНовойСтроки);
	
	//режимРедактирования = Ложь;
	НоваяЗадача = Неопределено;
	
	Элементы.СписокЗадач.Обновить();
КонецПроцедуры

&НаСервере
Функция УстановитьТекущийЭлемент()
	ТекущийЭлемент = Элементы.ЗадачаНаименование;
КонецФункции // УстановитьТекущийЭлемент()

////////////////////////////////////////////////////////////////////
// ЗАПИСЬ В РЕГИСТР ДатыЗадач, ЖесткиеДатыЗадач, ЗадачиКВыполнению

&НаСервере
Функция СохранитьОценкуСрок(пДело, пПараметр, пИмяПараметра)
	Если НЕ ЗначениеЗаполнено(пДело) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	текДата = ТекущаяДата();
	
	наборЗаписей = РегистрыСведений.ДатыЗадач.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Дело.Установить(пДело);
	наборЗаписей.Отбор.Период.Установить(текДата);
	наборЗаписей.Прочитать();
	
	Если наборЗаписей.Количество() = 0 Тогда
		новаяЗапись = наборЗаписей.Добавить();
	Иначе
		новаяЗапись = наборЗаписей[0];
	КонецЕсли;
	
	новаяЗапись.Дело = пДело;
	новаяЗапись.Период = текДата;
	новаяЗапись[пИмяПараметра] = пПараметр;
	
	наборЗаписей.Записать();
	
	Возврат Истина;
КонецФункции // СохранитьОценкуСрок()

&НаСервере
Функция СохранитьТвердыеДатыЗадач(пДело, пПараметр, пИмяПараметра)
	Если НЕ ЗначениеЗаполнено(пДело) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	текСотрудник = ПараметрыСеанса.ТекущийСотрудник;
	
	наборЗаписей = РегистрыСведений.ЖесткиеДатыЗадач.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Дело.Установить(пДело);
	наборЗаписей.Отбор.Сотрудник.Установить(текСотрудник);
	наборЗаписей.Прочитать();
	
	Если наборЗаписей.Количество() = 0 Тогда
		новаяЗапись = наборЗаписей.Добавить();
	Иначе
		новаяЗапись = наборЗаписей[0];
	КонецЕсли;
	
	новаяЗапись.Дело = пДело;
	новаяЗапись.Сотрудник = текСотрудник;
	новаяЗапись[пИмяПараметра] = пПараметр;
	
	наборЗаписей.Записать();
	
	Возврат Истина;
КонецФункции // СохранитьОценкуСрок()

///////////////////////////////////////////////////////////////////////////////////////////
// СТРОКА ПОИСКА И ОТБОРЫ

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	фЗаблокироватьВызовСервера = Ложь;
	
	// накладываем отбор на список
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		// удалим группу поиска
		группаотбора = Неопределено;
		
		Для каждого текЭлемент Из СписокЗадач.Отбор.Элементы Цикл
			Если текЭлемент.ИдентификаторПользовательскойНастройки = "ГруппаПоиска" Тогда
				группаотбора = текЭлемент;
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		Если НЕ группаотбора = Неопределено Тогда
			группаотбора.Использование = Ложь;
		КонецЕсли;
		
		Элементы.ГруппаОписанияУстановленияОтбора.Видимость = Ложь;
	Иначе
		группаотбора = Неопределено;
		
		Для каждого текЭлемент Из СписокЗадач.Отбор.Элементы Цикл
			Если текЭлемент.ИдентификаторПользовательскойНастройки = "ГруппаПоиска" Тогда
				группаотбора = текЭлемент;
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		
		Если группаотбора = Неопределено Тогда
			//Список.Отбор.Элементы.Очистить();
			
			группаотбора = СписокЗадач.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			группаотбора.ИдентификаторПользовательскойНастройки = "ГруппаПоиска";
			группаотбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		
		группаотбора.Элементы.Очистить();
		группаотбора.Использование = Истина;
		
		// теперь добавляем отборы
		//
		
		естьИ = Найти(СтрокаПоиска, " И ") > 0;
		естьИЛИ = Найти(СтрокаПоиска, " ИЛИ ") > 0;
		
		Если естьИ Тогда
			группаотбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
			строкиИ = СтрЗаменить(СтрокаПоиска, " И ", Символы.ПС);
			колво = СтрЧислоСтрок(строкиИ);
			Для сч = 1 По колво Цикл
				текСтрока = СтрПолучитьСтроку(строкиИ, сч);
				Если Найти(текСтрока, " ИЛИ ") > 0 Тогда
					лГруппаотбора = группаотбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					лГруппаотбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
					строкиИЛИ = СтрЗаменить(текСтрока, " ИЛИ ", Символы.ПС);
					лКолво = СтрЧислоСтрок(строкиИЛИ);
					Для сч2 = 1 По лКолво Цикл
						лТекСтрока = СтрПолучитьСтроку(строкиИЛИ, сч2);
						ДобавитьЭлементОтбора(лГруппаотбора, лТекСтрока);
					КонецЦикла;
				Иначе
					ДобавитьЭлементОтбора(группаотбора, текСтрока);
			 	КонецЕсли;
			КонецЦикла;
		ИначеЕсли естьИЛИ Тогда
			группаотбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			строкиИЛИ = СтрЗаменить(СтрокаПоиска, " ИЛИ ", Символы.ПС);
			колво = СтрЧислоСтрок(строкиИЛИ);
			Для сч = 1 По колво Цикл
				текСтрока = СтрПолучитьСтроку(строкиИЛИ, сч);
				ДобавитьЭлементОтбора(группаотбора, текСтрока);
			КонецЦикла;
		Иначе	
			ДобавитьЭлементОтбора(группаотбора, СтрокаПоиска);
		КонецЕсли;
		
		Элементы.ГруппаОписанияУстановленияОтбора.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ДобавитьЭлементОтбора(пГруппаОтбора, пСтрокаПоиска)
	Если ПустаяСтрока(СокрЛП(пСтрокаПоиска)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	лГруппаОтбора = пГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	лГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ЭлементОтбора = лГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дело.Наименование");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.ПравоеЗначение = пСтрокаПоиска;
	
	ЭлементОтбора = лГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дело.ТекстРасширенноеОписание");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.ПравоеЗначение = пСтрокаПоиска;
	
	ЭлементОтбора = лГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель.Наименование");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.ПравоеЗначение = пСтрокаПоиска;
	
	ЭлементОтбора = лГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Проект.Наименование");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.ПравоеЗначение = пСтрокаПоиска;
КонецФункции // ДобавитьЭлементОтбора()

&НаКлиенте
Процедура УстановитьОтбор(Команда)
	текДанные = ПолучитьТекущуюСтроку();
	
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	текПоле = Элементы.СписокЗадач.ТекущийЭлемент;
	имяПоля = СтрЗаменить(текПоле.Имя, "СписокЗадач", "");
	
	Если имяПоля = "Задача" Тогда
		имяПоля = "Дело";
	КонецЕсли;
	
	ПолеОтбора = Новый ПолеКомпоновкиДанных(имяПоля);
	
	искомыйОтбор = Неопределено;
	Для каждого текЭлемент Из СписокЗадач.Отбор.Элементы Цикл
		Если НЕ текЭлемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
			И НЕ ТипЗнч(текЭлемент) = тип("ГруппаЭлементовОтбораКомпоновкиДанных") И текЭлемент.ЛевоеЗначение = ПолеОтбора Тогда
			искомыйОтбор = текЭлемент;
		КонецЕсли;
	КонецЦикла;
	
	Если искомыйОтбор = Неопределено Тогда
		искомыйОтбор = СписокЗадач.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		искомыйОтбор.ЛевоеЗначение = ПолеОтбора;
	КонецЕсли;
	
	искомыйОтбор.Использование = Истина;
	искомыйОтбор.ПравоеЗначение = текДанные[имяПоля];
	
	//итлПопов {{09.12.2012#
	//
	Элементы.ПорученияУстановитьОтбор.Пометка = Истина;
	//}}Попов
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтбор(Команда)
	СтрокаПоиска = "";
	
	СтрокаПоискаПриИзменении(Неопределено);
	
	Для каждого текЭлемент Из СписокЗадач.Отбор.Элементы Цикл
		Если НЕ текЭлемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			текЭлемент.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	//итлПопов {{09.12.2012#
	//
	Элементы.ПорученияУстановитьОтбор.Пометка = Ложь;
	//}}Попов
КонецПроцедуры

////////////////////////////////////////////////////////////////////
// ОТБОР ПО СТАТУСУ

Процедура УстановитьОтборПоСтатусу()
	элементотбора = Неопределено;
	Для каждого текЭлемент Из СписокЗадач.Отбор.Элементы Цикл
		Если текЭлемент.ИдентификаторПользовательскойНастройки = "ГруппаСтатуса" Тогда
			элементотбора = текЭлемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если элементотбора = Неопределено Тогда
		элементотбора = СписокЗадач.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		элементотбора.ИдентификаторПользовательскойНастройки = "ГруппаСтатуса";
		элементотбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		элементотбора.Использование = Истина;
		
		элементотбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
		элементотбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	КонецЕсли;
	
	лСтатусы = ПолучитьСтруктуруСтатусов();
	значенияОтбора = Новый Массив;
	
	Для каждого кИз Из лСтатусы Цикл
		Если ЭтаФорма["ф" + КиЗ.Ключ] Тогда
			значенияОтбора.Добавить(кИз.Значение);
		КонецЕсли;
	КонецЦикла;
	
	элементотбора.ПравоеЗначение = значенияОтбора;
КонецПроцедуры // УстановитьОтборПоСтатусу()

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруСтатусов()
	лСтатусы = Новый Структура;
	
	Для каждого лПеречисление Из Метаданные.Перечисления.Статус.ЗначенияПеречисления Цикл
		лСтатусы.Вставить(лПеречисление.Имя, Перечисления.Статус[лПеречисление.Имя]);
	КонецЦикла;
	
	Возврат лСтатусы;
КонецФункции // ПолучитьСтруктуруСтатусов()

&НаКлиенте
Процедура НовыйПриИзменении(Элемент)
	УстановитьОтборПоСтатусу();
КонецПроцедуры

&НаКлиенте
Процедура ДопИнформацияПриИзменении(Элемент)
	УстановитьОтборПоСтатусу();
КонецПроцедуры

&НаКлиенте
Процедура КВыполнениюПриИзменении(Элемент)
	УстановитьОтборПоСтатусу();
КонецПроцедуры

&НаКлиенте
Процедура УточняетсяПриИзменении(Элемент)
	УстановитьОтборПоСтатусу();
КонецПроцедуры

&НаКлиенте
Процедура ВРаботеПриИзменении(Элемент)
	УстановитьОтборПоСтатусу();
КонецПроцедуры

&НаКлиенте
Процедура НазначенПриИзменении(Элемент)
	УстановитьОтборПоСтатусу();
КонецПроцедуры

&НаКлиенте
Процедура РешенПриИзменении(Элемент)
	УстановитьОтборПоСтатусу();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытПриИзменении(Элемент)
	УстановитьОтборПоСтатусу();
КонецПроцедуры

// ::::::::::::: ::::::::::::: :::::::::::::: ::::::::::::::::::: :::::::::::::: :::::::::::

&НаСервере
Функция СохранитьНовуюСтрокуВРегистры(текДанные)
	// ЗадачиКВыполнению
	наборЗаписей = РегистрыСведений.ЗадачиКВыполнению.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Дело.Установить(текДанные.Дело);
	наборЗаписей.Прочитать();

	Если наборЗаписей.Количество() = 0 Тогда
		новаяЗапись = наборЗаписей.Добавить();
	Иначе
		новаяЗапись = наборЗаписей[0];
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(новаяЗапись, текДанные);
	
	новаяЗапись.ДатаДобавления = ТекущаяДата();

	наборЗаписей.Записать();
	
	// ДатыЗадач
	//наборЗаписей = РегистрыСведений.ДатыЗадач.СоздатьНаборЗаписей();
	//наборЗаписей.Отбор.Дело.Установить(текДанные.Дело);
	//наборЗаписей.Прочитать();
	//
	//Если наборЗаписей.Количество() = 0 Тогда
	//	новаяЗапись = наборЗаписей.Добавить();
	//Иначе
	//	новаяЗапись = наборЗаписей[0];
	//КонецЕсли;
	//
	//ЗаполнитьЗначенияСвойств(новаяЗапись, текДанные);
	//
	//наборЗаписей.Записать();
	
	// Проект
	МодульДел.ОбновитьГруппуДел(текДанные.Дело, текДанные.Проект);
КонецФункции // СохранитьНовуюСтрокуВРегистры()

&НаСервере
Функция ПолучитьЗначенияПоУмолчаниюНовойСтроки()
	поУмолч = Новый Структура;
	
	поУмолч.Вставить("Проект", НоваяЗадача.ГруппаДел);
	поУмолч.Вставить("Статус", Перечисления.Статус.Новый);
	поУмолч.Вставить("Приоритет", Перечисления.Приоритеты.Низкий);
	поУмолч.Вставить("СистемныйПриоритет", 0);
	
	Возврат поУмолч;
КонецФункции // ПолучитьЗначенияПоУмолчаниюНовойСтроки()

// ::::::::::::: ::::::::::::: :::::::::::::: ::::::::::::::::::: :::::::::::::: :::::::::::

&НаКлиенте
Процедура СписокЗадачПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	
	Если Копирование Тогда
		//СкопироватьПоручение(Неопределено);
		
		Возврат;
	КонецЕсли;
	
	СоздатьЗадачу(Неопределено);
КонецПроцедуры

// ::::::::::::: ::::::::::::: :::::::::::::: ::::::::::::::::::: :::::::::::::: :::::::::::

&НаКлиенте
Процедура ОтдатьГолос(Команда)
	текДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ключЗаписи = Голоса.СохранитьГолос(текДанные.Дело);
	
	ОбновитьЗадачи();
	
	Оповестить("ОбновитьКонтролируемыеЗадачи");
	
	ПроверитьЕстьГолос(текДанные.Дело);
КонецПроцедуры

&НаСервере
Функция естьГолос(пДело)
	пСотрудник = ПараметрыСеанса.ТекущийСотрудник;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ГолосаДел.Дело,
	|	ГолосаДел.Голос
	|ИЗ
	|	РегистрСведений.ГолосаДел КАК ГолосаДел
	|ГДЕ
	|	ГолосаДел.Дело = &Дело
	|	И ГолосаДел.Голос = &Голос";
	
	Запрос.УстановитьПараметр("Дело", пДело);
	Запрос.УстановитьПараметр("Голос", пСотрудник);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции // естьГолос()

Функция ПроверитьЕстьГолос(текДело)
	естьГолос = естьГолос(текДело);
	
	Элементы.СписокЗадачКонтекстноеМенюОтдатьГолос.Заголовок = ?(естьГолос, "Задача уже не важна :(", "Задача важна! На контроль!");
КонецФункции // ПроверитьЕстьГолос()

&НаСервере
Функция ПолучитьПараметрыОтображения()
	списокПараметров = Новый Структура;
	
	лПараметры = Новый Структура;
	Если ПараметрыСеанса.РольСотрудника = Перечисления.РолиСотрудников.ПолныеПрава
		ИЛИ ПараметрыСеанса.РольСотрудника = Перечисления.РолиСотрудников.ОпытныйРазработчик Тогда
		лПараметры.Вставить("ТолькоПросмотр", ЛОЖЬ);
	Иначе
		лПараметры.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	списокПараметров.Вставить("СписокЗадачСтатус", лПараметры);
	
	Возврат списокПараметров;
КонецФункции

&НаКлиенте
Процедура СписокЗадачПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущаяСтрока = фПроверкаТекущаяСтрока Тогда
 		Возврат;
	КонецЕсли;

	фПроверкаТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	текДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЕстьГолос(текДанные.Дело);
	
	// в зависимости от прав дадим или запретим редактировать всякие поля
	списокПараметров = ПолучитьПараметрыОтображения();
	Для каждого строкаПараметра Из списокПараметров Цикл
		Для каждого лСвойство Из строкаПараметра.Значение Цикл
			Элементы[строкаПараметра.Ключ][лСвойство.Ключ] = лСвойство.Значение;
		КонецЦикла;
	КонецЦикла;
	
	клОбновитьОписание();
КонецПроцедуры

// ::::::::::::: ::::::::::::: :::::::::::::: ::::::::::::::::::: :::::::::::::: :::::::::::
// ФУНКЦИИ КОММЕНТИРОВАНИЯ

&НаКлиенте
Процедура клОбновитьОписание()
	Если НЕ ЕстьКомментарии Тогда
		Возврат;
	КонецЕсли;
	
	текДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если текДанные = Неопределено ИЛИ фЗаблокироватьВызовСервера Тогда
		Возврат;
	КонецЕсли;
	
	ПолеИстории = КомментарииСервер.ПолучитьОписание(текДанные.Дело);
КонецПроцедуры // клОбновитьОписание()

&НаКлиенте
Процедура СменитьСтатусПоручения(текДело = Неопределено)
	Если текДело = Неопределено Тогда
		текДело = Элементы.СписокЗадач.ТекущиеДанные;
	КонецЕсли;
	
	Если текДело = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомментарийДела = СтрЗаменить(ПолеКомментария, Символы.ПС, "<br>");
	ПолеКомментария = "";
	
	КомментарииКлиент.УстановитьСтатусПоручения(текДело.Дело, КомментарийДела);
	
	клОбновитьОписание();
КонецПроцедуры // СменитьСтатусПоручения()

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	СменитьСтатусПоручения();
КонецПроцедуры

////////////////////////////////////////////////////////////////////
// фЗаблокироватьВызовСервера

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	фЗаблокироватьВызовСервера = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолеКомментарияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	фЗаблокироватьВызовСервера = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолеКомментарияПриИзменении(Элемент)
	фЗаблокироватьВызовСервера = Ложь;
КонецПроцедуры

// ::::::::::::: ::::::::::::: :::::::::::::: ::::::::::::::::::: :::::::::::::: :::::::::::

&НаСервереБезКонтекста
Функция ПолучитьДанныеКлюча(пКлюч)
	МЗ = РегистрыСведений.ЗадачиКВыполнению.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МЗ, пКлюч);
	МЗ.Прочитать();
	
	рез = Новый Структура;
	рез.Вставить("Дело", МЗ.Дело);
	рез.Вставить("Статус", МЗ.Статус);
	
	Возврат рез;
КонецФункции // ПолучитьДанныеКлюча()

&НаСервереБезКонтекста
Функция ПолучитьДанныеКлючаРасширенный(пКлюч)
	МЗ = РегистрыСведений.ЗадачиКВыполнению.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МЗ, пКлюч);
	МЗ.Прочитать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗадачиКВыполнению.Дело КАК Дело,
	|	ЗадачиКВыполнению.Дело.ГруппаДел КАК Проект,
	|	ЗадачиКВыполнению.Статус,
	|	ЗадачиКВыполнению.Исполнитель,
	|	ЗадачиКВыполнению.Приоритет,
	|	ДатыЗадач.ПланТрудозатрат КАК Оценка,
	|	ДатыЗадач.ПлановаяДата КАК Срок,
	|	ГолосаДел.КоличествоГолосов,
	|	ЕстьNULL(Факт.Потрачено, 0) КАК Потрачено,
	|	ДатыЗадач.ПланТрудозатрат - ЕстьNULL(Факт.Потрачено, 0) КАК Осталось,
	|	ТвердыеДатыЗадач.Трудозатраты КАК ПерваяОценка,
	|	ТвердыеДатыЗадач.КрайнийСрок КАК КрайнийСрок
	|ИЗ
	|	РегистрСведений.ЗадачиКВыполнению КАК ЗадачиКВыполнению
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ДатыЗадач.СрезПоследних КАК ДатыЗадач
	|ПО
	|	ЗадачиКВыполнению.Дело = ДатыЗадач.Дело
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		ЖесткиеДатыЗадач.Дело,
	|		МАКСИМУМ(ЖесткиеДатыЗадач.Трудозатраты) КАК Трудозатраты,
	|		МАКСИМУМ(ЖесткиеДатыЗадач.КрайнийСрок) КАК КрайнийСрок
	|	ИЗ
	|		РегистрСведений.ЖесткиеДатыЗадач КАК ЖесткиеДатыЗадач
	|	СГРУППИРОВАТЬ ПО
	|		ЖесткиеДатыЗадач.Дело
	|	) КАК ТвердыеДатыЗадач
	|ПО
	|	ЗадачиКВыполнению.Дело = ТвердыеДатыЗадач.Дело
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		ГолосаДел.Дело,
	|		СРЕДНЕЕ(ГолосаДел.СистемныйПриоритет) КАК КоличествоГолосов
	|	ИЗ
	|		РегистрСведений.ГолосаДел КАК ГолосаДел
	|	СГРУППИРОВАТЬ ПО
	|		ГолосаДел.Дело
	|	) КАК ГолосаДел
	|ПО
	|	ЗадачиКВыполнению.Дело = ГолосаДел.Дело
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		Факт.Дело,
	|		СУММА(РАЗНОСТЬДАТ(Факт.Старт, Факт.Завершение, МИНУТА) / 60) КАК Потрачено
	|	ИЗ
	|		РегистрСведений.Дела КАК Факт
	|	СГРУППИРОВАТЬ ПО
	|		Факт.Дело
	|	) КАК Факт
	|ПО
	|	ЗадачиКВыполнению.Дело = Факт.Дело
	|ГДЕ
	|	ЗадачиКВыполнению.Дело = &Задача
	|";
	
	Запрос.УстановитьПараметр("Задача", МЗ.Дело);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	рез = Новый Структура;
	
	Если Выборка.Количество() > 0 Тогда
		лСтрока = Выборка[0];
		
		Для каждого колонка Из Выборка.Колонки Цикл
			рез.Вставить(колонка.Имя, лСтрока[колонка.Имя]);
		КонецЦикла;
	Иначе
		рез.Вставить("Дело", МЗ.Дело);
	КонецЕсли;
	
	Возврат рез;
КонецФункции // ПолучитьДанныеКлюча()

&НаКлиенте
Процедура ДействиеРазработчик(Команда)
	выбранныеСтроки = Элементы.СписокЗадач.ВыделенныеСтроки;
	
	ид = Число(Сред(Команда.Имя, 2));
	
	поменятьНА = СписокРазработчиков[ид].Значение;
	
	Для каждого выбраннаяСтрока Из выбранныеСтроки Цикл
		текДанные = ПолучитьДанныеКлюча(выбраннаяСтрока);
		
		ПереназначитьНа(текДанные.Дело, поменятьНА, текДанные.Статус);
	КонецЦикла;
	
	ОбновитьЗадачи();
КонецПроцедуры

&НаСервере
Функция ПереназначитьНа(пДело, пИсполнитель, пПредСтатус)
	статусНА = Перечисления.Статус.КВыполнению;
	
	Если    пПредСтатус = Перечисления.Статус.Закрыт
		ИЛИ пПредСтатус = Перечисления.Статус.Решен
		ИЛИ пПредСтатус = Перечисления.Статус.Уточняется Тогда
		
		Статусы.ИзменитьСтатус(пДело, Перечисления.Статус.ДопИнформация);
	КонецЕсли;
	ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(пДело, пИсполнитель, "Исполнитель");
	Статусы.ИзменитьСтатус(пДело, статусНА);
КонецФункции // ПереназначитьНа()

&НаКлиенте
Процедура ПеренестиВПожелания(Команда)
	ответ = Вопрос("Задача будут удалены из списка задач и добавлены в список пожеланий, а также их статус изменится на ""уточняются"". Продолжить?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена);
	Если ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	выбранныеСтроки = Элементы.СписокЗадач.ВыделенныеСтроки;
	
	Для каждого выбраннаяСтрока Из выбранныеСтроки Цикл
		текДанные = ПолучитьДанныеКлюча(выбраннаяСтрока);
		
		ПеренестиВПожеланияСервер(текДанные.Дело);
	КонецЦикла;
	
	ОбновитьЗадачи();
КонецПроцедуры

Функция ПеренестиВПожеланияСервер(пДело)
	// Исполнитель - пусто
	// Статус - уточняется
	// Добавляем комментарий
	
	ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(пДело, Справочники.Сотрудники.ПустаяСсылка(), "Исполнитель");

	Статусы.ИзменитьСтатус(пДело, Перечисления.Статус.Уточняется);
	
	// ЗадачиКПожеланию
	наборЗаписей = РегистрыСведений.ЗадачиКПожеланию.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Дело.Установить(пДело);
	наборЗаписей.Прочитать();

	Если наборЗаписей.Количество() = 0 Тогда
		новаяЗапись = наборЗаписей.Добавить();
	Иначе
		Возврат Истина;
	КонецЕсли;

	новаяЗапись.Дело = пДело;
 	новаяЗапись.Статус = Перечисления.Статус.Новый;
 	новаяЗапись.Автор = ПараметрыСеанса.ТекущийСотрудник;
 	новаяЗапись.ДатаДобавления = ТекущаяДата();

	наборЗаписей.Записать();
	
	// запишем полностью сообщение в качестве комментария
	КомментарийДела = "Обращение перенесено в пожелания";
	КомментарииСервер.ЗаписатьВРегистрСтатусПоручения(пДело, КомментарийДела);
КонецФункции // ПеренестиВПожеланияСервер()

&НаСервере
Функция ПолучитьДоступныеПоляДляДействий(текДанные)
	ДоступныеПоляДляДействий = Новый Соответствие;
	Если    ПараметрыСеанса.РольСотрудника = Перечисления.РолиСотрудников.ОпытныйРазработчик 
		ИЛИ ПараметрыСеанса.РольСотрудника = Перечисления.РолиСотрудников.ПолныеПрава Тогда
		
		ДоступныеПоляДляДействий.Вставить("СписокЗадачПроект"		, Истина);
		ДоступныеПоляДляДействий.Вставить("СписокЗадачИсполнитель"	, Истина);
		ДоступныеПоляДляДействий.Вставить("СписокЗадачКрайнийСрок"	, Истина);
		ДоступныеПоляДляДействий.Вставить("СписокЗадачОсталось"		, Истина);
		ДоступныеПоляДляДействий.Вставить("СписокЗадачОценка"		, Истина);
		ДоступныеПоляДляДействий.Вставить("СписокЗадачПерваяОценка"	, Истина);
		ДоступныеПоляДляДействий.Вставить("СписокЗадачСрок"			, Истина);
		ДоступныеПоляДляДействий.Вставить("СписокЗадачСтатус"		, Истина);
		ДоступныеПоляДляДействий.Вставить("СписокЗадачПриоритет"	, Истина);
	КонецЕсли;
	
	Если ПараметрыСеанса.РольСотрудника = Перечисления.РолиСотрудников.ПолныеПрава Тогда
		ДоступныеПоляДляДействий.Вставить("СписокЗадачСистемныйПриоритет", Истина);
	КонецЕсли;
	
	Если ПараметрыСеанса.РольСотрудника = Перечисления.РолиСотрудников.Разработчик Тогда
		Если текДанные.Исполнитель = ПараметрыСеанса.ТекущийСотрудник Тогда
			ДоступныеПоляДляДействий.Вставить("СписокЗадачПроект"		, Истина);
			ДоступныеПоляДляДействий.Вставить("СписокЗадачИсполнитель"	, Истина);
			ДоступныеПоляДляДействий.Вставить("СписокЗадачОсталось"		, Истина);
			ДоступныеПоляДляДействий.Вставить("СписокЗадачОценка"		, Истина);
			ДоступныеПоляДляДействий.Вставить("СписокЗадачСтатус"		, Истина);
			ДоступныеПоляДляДействий.Вставить("СписокЗадачПриоритет"	, Истина);
	КонецЕсли;
	КонецЕсли;
	
	Возврат ДоступныеПоляДляДействий;
КонецФункции // ПолучитьПараметрыСеанса()

&НаКлиенте
Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	текДанные = ПолучитьДанныеКлючаРасширенный(ВыбраннаяСтрока[0]);
	
	ДоступныеПоляДляДействий = ПолучитьДоступныеПоляДляДействий(текДанные);
	
	Если ДоступныеПоляДляДействий[Поле.Имя] = Неопределено Тогда
		ОткрытьЗадачу(Неопределено);
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействиеПриВыборе(Поле.Имя, текДанные);
		
	ОбновитьЗадачи();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеПриВыборе(Поле, текДанные)
	Если Поле = "СписокЗадачСистемныйПриоритет" Тогда
		новоеЗначение = 1;
		Ответ = ВвестиЧисло(новоеЗначение, НСтр("ru = ""Порядковый номер задачи!""; en = ""Order number of task!"""), 10, 0);
		Если Ответ Тогда
			Если новоеЗначение < 0 Тогда
				новоеЗначение = 0;
			КонецЕсли;
			предЗначение = Неопределено;
			ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(текДанные.Дело, новоеЗначение, "СистемныйПриоритет", предЗначение);
			Статусы.ПереписатьСледующиеПриоритеты(текДанные.Дело, новоеЗначение, предЗначение);
		КонецЕсли;
	ИначеЕсли Поле = "СписокЗадачПроект" Тогда
		формаВыбора = ПолучитьФорму("Справочник.ГруппаДел.ФормаВыбора", , ЭтаФорма);
		лПроект = формаВыбора.ОткрытьМодально();
		Если НЕ лПроект = Неопределено Тогда
			МодульДел.ОбновитьГруппуДел(текДанные.Дело, лПроект);
		КонецЕсли;
	ИначеЕсли Поле = "СписокЗадачИсполнитель" Тогда
		лИсполнитель = текДанные.Исполнитель;
		Если ВвестиЗначение(лИсполнитель, НСтр("ru = ""Введите исполнителя""; en = ""Not defined""")) Тогда
			ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(текДанные.Дело, лИсполнитель, "Исполнитель");
		КонецЕсли;
	ИначеЕсли Поле = "СписокЗадачКрайнийСрок" Тогда
		лКрайнийСрок = текДанные.КрайнийСрок;
		Если ВвестиДату(лКрайнийСрок, НСтр("ru = ""Введите крайний срок""; en = ""Not defined""")) Тогда
			СохранитьТвердыеДатыЗадач(текДанные.Дело, лКрайнийСрок, "КрайнийСрок");
		КонецЕсли;
	ИначеЕсли Поле = "СписокЗадачОсталось" Тогда
		лОсталось = текДанные.Осталось;
		Если ВвестиЧисло(лОсталось, НСтр("ru = ""Введите сколько осталось по задаче""; en = ""Not defined"""), 10, 0) Тогда
			ЗадачиКВыполнению.ИзмененаОценка(текДанные.Дело, текДанные.Статус, текДанные.Срок, текДанные.Потрачено, лОсталось, , текДанные.Исполнитель);
		КонецЕсли;
	ИначеЕсли Поле = "СписокЗадачОценка" Тогда
		лОценка = текДанные.Оценка;
		Если ВвестиЧисло(лОценка, НСтр("ru = ""Введите оценку выполнения задачи""; en = ""Not defined"""), 10, 0) Тогда
			ЗадачиКВыполнению.ИзмененаОценка(текДанные.Дело, текДанные.Статус, текДанные.Срок, текДанные.Потрачено, , лОценка, текДанные.Исполнитель);
		КонецЕсли;
	ИначеЕсли Поле = "СписокЗадачПерваяОценка" Тогда
		лПерваяОценка = текДанные.ПерваяОценка;
		Если ВвестиЧисло(лПерваяОценка, НСтр("ru = ""Введите обещанную оценку задачи""; en = ""Not defined"""), 10, 0) Тогда
			СохранитьТвердыеДатыЗадач(текДанные.Дело, лПерваяОценка, "Трудозатраты");
		КонецЕсли;
	ИначеЕсли Поле = "СписокЗадачСрок" Тогда
		лСрок = текДанные.Срок;
		Если ВвестиДату(лСрок, НСтр("ru = ""Введите срок выполнения задачи""; en = ""Not defined""")) Тогда
			СохранитьОценкуСрок(текДанные.Дело, лСрок, "ПлановаяДата");
		КонецЕсли;
	ИначеЕсли Поле = "СписокЗадачСтатус" Тогда
		лСтатус = текДанные.Статус;
		Если ВвестиЗначение(лСтатус, НСтр("ru = ""Введите новый статус задачи""; en = ""Not defined""")) Тогда
			Статусы.ИзменитьСтатус(текДанные.Дело, лСтатус);
		КонецЕсли;
	ИначеЕсли Поле = "СписокЗадачПриоритет" Тогда
		лПриоритет = текДанные.Приоритет;
		Если ВвестиЗначение(лПриоритет, НСтр("ru = ""Введите новый приоритет задачи""; en = ""Not defined""")) Тогда
			ЗадачиКВыполнению.СохранитьВЗадачиКВыполнению(текДанные.Дело, лПриоритет, "Приоритет");
		КонецЕсли;
	Иначе
		ОткрытьЗадачу(Неопределено);
		Возврат;
	КонецЕсли;
КонецПроцедуры // ВыполнитьДействиеПриВыборе()

&НаКлиенте
Процедура УдалитьСтрокуЗадачи(Команда)
	//TODO
КонецПроцедуры

