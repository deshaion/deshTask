&НаКлиенте
Перем фЗаблокироватьВызовСервера;

&НаКлиенте
Перем фПроверкаТекущаяСтрока;

// ::::::::::::: ::::::::::::: :::::::::::::: ::::::::::::::::::: :::::::::::::: :::::::::::
// ФУНКЦИИ КОММЕНТИРОВАНИЯ

&НаКлиенте
Процедура клОбновитьОписание()
	текДанные = Элементы.Список.ТекущиеДанные;
	Если текДанные = Неопределено ИЛИ фЗаблокироватьВызовСервера Тогда
		Возврат;
	КонецЕсли;
	
	ПолеИстории = КомментарииСервер.ПолучитьОписание(текДанные.Дело);
КонецПроцедуры // клОбновитьОписание()

&НаКлиенте
Процедура СменитьСтатусПоручения(текДело = Неопределено)
	Если текДело = Неопределено Тогда
		текДело = Элементы.Список.ТекущиеДанные;
	КонецЕсли;
	
	Если текДело = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомментарийДела = СтрЗаменить(ПолеКомментария, Символы.ПС, "<br>");
	ПолеКомментария = "";
	
	КомментарииКлиент.УстановитьСтатусПоручения(текДело.Дело, КомментарийДела);
	
	клОбновитьОписание();
КонецПроцедуры // СменитьСтатусПоручения()

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	СменитьСтатусПоручения();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКомментарии(Команда)
	ЕстьКомментарии = НЕ ЕстьКомментарии;
	Элементы.ИсторияСобытий.Видимость = ЕстьКомментарии;
КонецПроцедуры

&НаКлиенте
Процедура СсылкаДобавитьКомментарийНажатие(Элемент)
	текПозиция = Элементы.ПанельДобавленияКомментария.Видимость;
	
	Элементы.ПанельДобавленияКомментария.Видимость = НЕ текПозиция;
	Если текПозиция Тогда // панель видима, и мы переходим в режим не видимости
		Элементы.СсылкаДобавитьКомментарий.Заголовок = "Оставить комментарий";
	Иначе
		Элементы.СсылкаДобавитьКомментарий.Заголовок = "Скрыть поле добавления комментария";
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////
// БЛОКИРОВКИ ВЫЗОВА СЕРВЕРА

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	фЗаблокироватьВызовСервера = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавляемоеПожеланиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	фЗаблокироватьВызовСервера = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавляемоеПожеланиеПриИзменении(Элемент)
	фЗаблокироватьВызовСервера = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПолеКомментарияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	фЗаблокироватьВызовСервера = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолеКомментарияПриИзменении(Элемент)
	фЗаблокироватьВызовСервера = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПолеОценкиАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	фЗаблокироватьВызовСервера = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолеОценкиПриИзменении(Элемент)
	фЗаблокироватьВызовСервера = Ложь;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////
// СТРОКА ПОИСКА

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	фЗаблокироватьВызовСервера = Ложь;
	
	// накладываем отбор на список
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		// удалим группу поиска
		группаотбора = Неопределено;
		
		Для каждого текЭлемент Из Список.Отбор.Элементы Цикл
			Если текЭлемент.ИдентификаторПользовательскойНастройки = "ГруппаПоиска" Тогда
				группаотбора = текЭлемент;
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		Если НЕ группаотбора = Неопределено Тогда
			группаотбора.Использование = Ложь;
		КонецЕсли;
		
		Элементы.ГруппаОписанияУстановленияОтбора.Видимость = Ложь;
	Иначе
		группаотбора = Неопределено;
		
		Для каждого текЭлемент Из Список.Отбор.Элементы Цикл
			Если текЭлемент.ИдентификаторПользовательскойНастройки = "ГруппаПоиска" Тогда
				группаотбора = текЭлемент;
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		
		Если группаотбора = Неопределено Тогда
			//Список.Отбор.Элементы.Очистить();
			
			группаотбора = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			группаотбора.ИдентификаторПользовательскойНастройки = "ГруппаПоиска";
			группаотбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		
		группаотбора.Элементы.Очистить();
		группаотбора.Использование = Истина;
		
		// теперь добавляем отборы
		//
		
		естьИ = Найти(СтрокаПоиска, " И ") > 0;
		естьИЛИ = Найти(СтрокаПоиска, " ИЛИ ") > 0;
		
		Если естьИ Тогда
			группаотбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
			строкиИ = СтрЗаменить(СтрокаПоиска, " И ", Символы.ПС);
			колво = СтрЧислоСтрок(строкиИ);
			Для сч = 1 По колво Цикл
				текСтрока = СтрПолучитьСтроку(строкиИ, сч);
				Если Найти(текСтрока, " ИЛИ ") > 0 Тогда
					лГруппаотбора = группаотбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					лГруппаотбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
					строкиИЛИ = СтрЗаменить(текСтрока, " ИЛИ ", Символы.ПС);
					лКолво = СтрЧислоСтрок(строкиИЛИ);
					Для сч2 = 1 По лКолво Цикл
						лТекСтрока = СтрПолучитьСтроку(строкиИЛИ, сч2);
						ДобавитьЭлементОтбора(лГруппаотбора, лТекСтрока);
					КонецЦикла;
				Иначе
					ДобавитьЭлементОтбора(группаотбора, текСтрока);
			 	КонецЕсли;
			КонецЦикла;
		ИначеЕсли естьИЛИ Тогда
			группаотбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			строкиИЛИ = СтрЗаменить(СтрокаПоиска, " ИЛИ ", Символы.ПС);
			колво = СтрЧислоСтрок(строкиИЛИ);
			Для сч = 1 По колво Цикл
				текСтрока = СтрПолучитьСтроку(строкиИЛИ, сч);
				ДобавитьЭлементОтбора(группаотбора, текСтрока);
			КонецЦикла;
		Иначе	
			ДобавитьЭлементОтбора(группаотбора, СтрокаПоиска);
		КонецЕсли;
		
		Элементы.ГруппаОписанияУстановленияОтбора.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ДобавитьЭлементОтбора(пГруппаОтбора, пСтрокаПоиска)
	Если ПустаяСтрока(СокрЛП(пСтрокаПоиска)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭлементОтбора = пГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекстПожелания");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.ПравоеЗначение = пСтрокаПоиска;
КонецФункции // ДобавитьЭлементОтбора()

///////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Список.Параметры.УстановитьЗначениеПараметра("СимволПС", Символы.ПС);
	
	Для каждого текЭлемент Из Список.УсловноеОформление.Элементы Цикл
		текЭлемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЦикла;
	Для каждого текЭлемент Из Список.Порядок.Элементы Цикл
		текЭлемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	фЗаблокироватьВызовСервера = Ложь;
	
	ОтобразитьПанельДобавления(Неопределено);
	
	ПодключитьОбработчикОжидания("клОбновитьОписание", 15);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПожелание(Команда)
	ДобавитьПожеланиеСервер();
	
	ДобавляемоеПожелание = "";
	ПолеОценки = 0;
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Функция ДобавитьПожеланиеСервер()
	ссылкаДело = МодульДел.СоздатьНовоеДело(ДобавляемоеПожелание);
	
	лПараметры = Новый Структура;
	лПараметры.Вставить("ПланТрудозатрат", ПолеОценки);

	ЗадачиКВыполнению.СохранитьОценкуСрок(ссылкаДело, лПараметры); 
	
	// ЗадачиКВыполнению
	наборЗаписей = РегистрыСведений.ЗадачиКПожеланию.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Дело.Установить(ссылкаДело);
	наборЗаписей.Прочитать();

	Если наборЗаписей.Количество() = 0 Тогда
		новаяЗапись = наборЗаписей.Добавить();
	Иначе
		новаяЗапись = наборЗаписей[0];
	КонецЕсли;

	новаяЗапись.Дело = ссылкаДело;
 	новаяЗапись.Статус = Перечисления.Статус.Новый;
 	новаяЗапись.Автор = ПараметрыСеанса.ТекущийСотрудник;
 	новаяЗапись.ДатаДобавления = ТекущаяДата();

	наборЗаписей.Записать();
	
	// запишем полностью сообщение в качестве комментария
	Если СокрЛП(ссылкаДело.Наименование) <> СокрЛП(ДобавляемоеПожелание) Тогда
		КомментарийДела = СтрЗаменить(ДобавляемоеПожелание, Символы.ПС, "<br>");
		
		КомментарииСервер.ЗаписатьВРегистрСтатусПоручения(ссылкаДело, КомментарийДела);
	КонецЕсли;
КонецФункции // ДобавитьПожеланиеСервер()

&НаКлиенте
Процедура ОтобразитьПанельДобавления(Команда)
	текПозиция = Элементы.ПанельДобавленияПожелания.Видимость;
	
	Элементы.ПанельДобавленияПожелания.Видимость = НЕ текПозиция;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.ДобавитьГолос Тогда
		ИзменитьГолосСервер(ВыбраннаяСтрока);
	//ИначеЕсли Поле = Элементы.ДатаДобавления И ПараметрыСеанса.РольСотрудника =  Тогда	
	
	ИначеЕсли Поле = Элементы.ТекстПожелания Тогда
		вопросы = Новый СписокЗначений;
		вопросы.Добавить("Открыть", "Открыть задачу");
		вопросы.Добавить("ПланРазвития", "Найти в плане развития");
		ответ = Вопрос("Выберите действие:", вопросы);
		
		текДело = ПолучитьДелоПоКлючуРегистра(ВыбраннаяСтрока);
		Если ответ = "Открыть" Тогда
			п = Новый Структура("Ключ", текДело);
			ОткрытьФорму("Справочник.Дело.ФормаОбъекта", п);
		ИначеЕсли ответ = "ПланРазвития" Тогда
			формаВыбора = ПолучитьФорму("Справочник.ПланРазвития.ФормаСписка", Новый Структура("ОтборПоЗадаче", текДело));
			формаВыбора.Открыть();
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Функция ПолучитьДелоПоКлючуРегистра(выбраннаяСтрока)
	Возврат выбраннаяСтрока.Дело;
КонецФункции // ВыборТекущейСтроки()

&НаСервере
Функция ИзменитьГолосСервер(пСтрока)
	Голоса.СохранитьГолос(пСтрока.Дело);
КонецФункции // ИзменитьГолосСервер()

///////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОтклонитьПожелание(Команда)
	текДело = Элементы.Список.ТекущиеДанные;
	
	Если текДело = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МодульДел.ОбновитьЗначениеВРегистре("ЗадачиКПожеланию", "Дело", текДело.Дело, "Статус", ПредопределенноеЗначение("Перечисление.Статус.Уточняется"));
	
	КомментарииКлиент.УстановитьСтатусПоручения(текДело.Дело, "Пожелание отклонено");
	
	клОбновитьОписание();
	Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиКВыполнению(Команда)
	текДело = Элементы.Список.ТекущиеДанные;
	
	Если текДело = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДела = Новый Структура("Дело, ДатаДобавления, Контроллер", 
		текДело.Дело, текДело.ДатаДобавления, текДело.Автор);
	
	ЗадачиКВыполнению.ПеренестиКВыполнениюСервер(ПараметрыДела);
	
	Элементы.Список.Обновить();
	клОбновитьОписание();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПланРазвития(Команда)
	текДело = Элементы.Список.ТекущиеДанные;
	
	Если текДело = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// надо выбрать родителя и порядок
	// по сути открыть карточку
	// правда если данная задача уже есть в плане развития. в деле надо это отобразить
	ответ = Вопрос("Создать новый пункт? Иначе откроектся действующий", РежимДиалогаВопрос.ДаНет);
	
	Если ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьФорму("Справочник.ПланРазвития.ФормаОбъекта", Новый Структура("Основание", текДело.Дело));
	Иначе
		формаВыбора = ПолучитьФорму("Справочник.ПланРазвития.ФормаСписка", Новый Структура("ОтборПоЗадаче", текДело.Дело));
		формаВыбора.Открыть();
	КонецЕсли;
	
	Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущаяСтрока = фПроверкаТекущаяСтрока Тогда
 		Возврат;
	КонецЕсли;

	фПроверкаТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	клОбновитьОписание();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачу(Команда)
	текДело = Элементы.Список.ТекущиеДанные;
	
	Если текДело = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	п = Новый Структура("Ключ", текДело.Дело);
	ОткрытьФорму("Справочник.Дело.ФормаОбъекта", п);
КонецПроцедуры






